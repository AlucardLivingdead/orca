<!-- Copyright 2005-2009, Sun Microsystems, Inc. -->

  <!--
  ************************************************************************
  *                                                                      *
  * ARCHITECTURE                                                         *
  *                                                                      *
  ************************************************************************
  -->

  <chapter id="architecture"><title>Architecture</title>
    <para>The Orca architecture has been driven primarily by the Orca
    User Experience Design.  There are two primary operating modes
    of Orca: a focus tracking mode and a flat review mode.</para>

    <para>The focus tracking mode is the preferred mode of operation.
    It generally relies upon applications to provide reasonable
    keyboard navigation techniques to allow the user to operate the
    application without requiring the mouse.  As the user uses
    traditional keyboard navigation techniques to move from component
    to component in the application (e.g., pressing the Tab key to
    move from pushbutton to text area to toggle button, etc.), Orca
    will present this to the user via braille, speech, magnification,
    or a combination thereof.  In the cases where more complex
    navigation is needed, such as structural navigation of complex
    text documents, Orca also provides a facility to define keyboard
    and braille input events that it can intercept and handle
    appropriately.</para>

    <para>The flat review mode provides the user with the ability to
    spatially navigate a window, giving them the ability to explore as
    well as discover and interact with components in the window. This
    mode is not a preferred mode, but is instead intended to allow a
    user to interact with ill-behaved applications.  Orca provides a
    default set of keybindings for flat review, and these keybindings
    can be easily redefined by the user.</para>

    <para>The focus tracking mode of Orca is handled by "scripts,"
    which are Python modules that can provide a custom interpretation
    of an application's interaction model.  It is not intended that
    there will be a unique script for every application.  Instead, it
    is expected that there will be a general purpose "default" script
    that covers a large number of applications.  In the event that
    more compelling or custom behavior is desired for an application,
    however, one can use a custom script for the application.
    Furthermore, scripts can subclass other scripts, allowing them to
    be quite simple. In practice, all the custom scripts extend the
    "default" script.</para>

    <para>As illustrated in the high level Orca architecture diagram,
    the main components of Orca are as follows: desktop applications
    that support the AT-SPI, the AT-SPI registry and infrastructure,
    Orca itself, Orca Scripts, and system services (e.g., speech,
    braille, magnification).</para>

    <figure>
      <title>High Level Orca Architecture. The main components of Orca
      are as follows: desktop applications that support the AT-SPI,
      the AT-SPI registry and infrastructure, Orca itself, Orca
      Scripts, and system services.  The key communication between the
      components is depicted.</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="architecture.png" format="PNG"/>
        </imageobject>
        <textobject>
          <phrase>High Level Orca Architecture</phrase>
        </textobject>
      </mediaobject>      
    </figure>

    <para>The following sections describe the architecture in more
    detail.</para>

    <section id="archdesktop"><title>Desktop and AT-SPI</title>
      <para>Orca's sole view of any application on the desktop is via
      the AT-SPI <citation><xref linkend="at-spi"
      endterm="at-spi.abbrev"/></citation>.  The AT-SPI is an
      IDL/CORBA/Bonobo-based
      technology <citation><xref linkend="bonobo"
      endterm="bonobo.abbrev"/></citation> that provides a common
      interface for the desktop and its applications to expose their
      GUI component hierarchy to assistive technologies such as Orca.
      &note; the AT-SPI infrastructure is being migrated to D-Bus for
      GNOME 3.0.  This migration should have little impact on the
      architecture or code of Orca.  In other words, do you worry
      'bout a thing.</para>

      <para>AT-SPI support is provided by toolkits such as GNOME's
      GTK+ toolkit (via GAIL <citation><xref linkend="gail"
      endterm="gail.abbrev"/></citation>), the Java platform (via the
      Java access bridge), and the custom toolkits used by
      applications such as Mozilla and Open Office.  Future support
      includes the Qt toolkit of KDE.</para>

      <para>Assistive Technologies interact with the AT-SPI via two
      primary means: the AT-SPI registry and accessible objects.  The
      AT-SPI registry permits assistive technologies to discover
      existing applications on the desktop and to register for event
      notification for AT-SPI events (e.g., window creation, focus
      changes, object state changes, etc.) and device events (e.g.,
      keyboard input events).  Accessible objects provide the
      assistive technology with information about the application, and
      tend to mirror the actual GUI component hierarchy.  Accessible
      objects can be obtained in three ways: </para>

      <orderedlist numeration="arabic">
        <listitem>
          <para>From the AT-SPI registry via queries on the desktop</para>
        </listitem>
        <listitem>
          <para>From an AT-SPI event</para>
        </listitem>
        <listitem>
          <para>From another Accessible via parent/child relationships
            and other relationships such as "label for" and 
	    "labeled by".</para>
        </listitem>
      </orderedlist>

      <para>Orca's interaction with the AT-SPI is managed through the
      <literal>pyatspi.py</literal> module that is part of AT-SPI.  The
      <literal>pyatspi.py</literal> module communicates directly with
      the AT-SPI number of classes that help with AT-SPI interaction.
      The best ways to learn AT-SPI are as follows:

      <orderedlist numeration="arabic">
        <listitem>
          <para>Read the AT-SPI interface documentation.</para>
        </listitem>
        <listitem>
          <para>Run the <literal>accerciser</literal> application to
          examine the accessibility information of desktop
          applications.  This includes analyzing the accessible
          hierarchy as well as watching events that are issued as
          you interact with desktop applcations.</para>
        </listitem>
        <listitem>
          <para>Enable the debug mode of Orca as described on the
          <ulink url="http://live.gnome.org/Orca/Debugging">Orca
          WIKI</ulink>.  Run Orca and interact with an
          application. Then, quit Orca and analyze the debug
          log.</para>
        </listitem>
      </orderedlist>
      </para>

      <para>As illustrated in the high level Orca architecture
      diagram, the <literal>pyatspi</literal> module has been used to
      register event and device listeners with the AT-SPI registry.
      Each exemplary desktop application (Firefox, Evolution, Pidgin,
      and OpenOffice) emits AT-SPI events to the AT-SPI registry which
      then delivers them to the <literal>pyatspi</literal> module.
      The <literal>pyatspi</literal> module then calls all appropriate
      listeners for the events it receives from the AT-SPI
      registry.</para>

      <para>In this case, the <literal>orca</literal> module receives
      keyboard events, which it interprets and also sends on to the
      <literal>focus_tracking_presenter</literal> module (not depicted
      in the illustration).  Of more
      interest, however, is that the
      <literal>focus_tracking_presenter</literal> module receives
      AT-SPI events which it then passes on the script for the
      application associated with the event.  If there is no script,
      the <literal>focus_tracking_presenter</literal> will create an
      instance of the default script.  See the &scriptguidelink; for
      more information.</para>

      <para>&detail; Because processing AT-SPI object events can be
      time consuming, and because the notification of AT-SPI object
      events is relatively "bursty," the
      <literal>focus_tracking_presenter</literal> maintains a queue of
      AT-SPI object and input device events. It adds the events to
      this queue when it receives them and processes the events on the
      GLib idle handling thread.  This permits Orca to survive a
      relatively long burst of events and also allows it to handle the
      events on a thread that is compatible with GLib.</para>
    </section>

    <section id="archorca"><title>Orca Module</title>
      <para>The <literal>orca</literal> module is the "main entry
      point" of Orca.  It initializes the components that Orca uses
      (pyatspi, speech, braille, mag) and loads the user's settings.
      It also is the first to receive all keyboard and braille input
      events and delves them out to other Orca components
      appropriately.</para>

      <para>The <literal>orca</literal> module maintains the current
      known "locus of focus" in the <literal>locusOfFocus</literal>
      field of the <literal>orca_state</literal> module.  The
      <literal>orca_state.locusOfFocus</literal> field is intended to
      represent the current object that the user is working with.  In
      simple terms, it is the object that is highlighted or has the
      dotted line drawn around it.  Be advised that the notion of
      "focus" differs from toolkit to toolkit.  For example, the
      object with toolkit focus may actually be the parent of the
      object that is highlighted.  As such,
      the <literal>orca_status.locusOfFocus</literal> field is an an
      attempt to neutralize these differences across toolkits: the
      locus of focus is the individual object that is highlighted, has
      the caret, etc.</para>

      <para>Orca scripts
      set <literal>orca_state.locusOfFocus</literal> to inform Orca
      when the locus of focus has changed.  In addition, in the event
      that there was a visual appearance change to the object that has
      the locus of focus, the <literal>orca</literal> module provides
      a <literal>visualAppearanceChanged</literal> that scripts can
      use to inform Orca of this event.</para>

      <para>&note; The <literal>orca_state.locusOfFocus</literal>
      field is intended to be set only via the
      <literal>setLocusOfFocus</literal> method of the
      <literal>orca</literal> module. Because the
      <literal>orca.setLocusOfFocus</literal> method performs bookkeeping
      and other tasks, the
      <literal>orca_state.locusOfFocus</literal> field should never be
      set directly.</para>

      <section id="archsettings"><title>settings</title> 
        <para>The <literal>settings</literal> module (not depicted in
        the high level Orca architecture diagram) holds preferences
        set by the user during configuration.  These settings include
        the following: use of speech, braille, and/or magnification,
        voice styles, key echo, text echo, etc.</para>

        <para>Any Orca module can check the value of a setting by
        examining the field directly in the
        <literal>settings</literal> module.  In addition, the
        <literal>orca</literal> module will import the
        <literal>user-settings</literal> module from the
        <literal>~/.orca directory</literal>, if it exists.
        The <literal>user-settings</literal> module is
	created as part of the configuration process that is run the
	first time Orca is used or when the user presses 
	<literal>Insert+Space</literal> to invoke the configuration
	GUI.</para>

	<para>The <literal>user-settings</literal> module is a Python
        script, allowing it to contain functions, class definitions,
        etc.  The primary job of the
        <literal>user-settings</literal>, however, is to directly set
        the values of fields in the <literal>settings</literal>
        module.</para>

        <para>&detail; the <literal>init</literal> method of the
        <literal>orca</literal> module obtains settings.  As a
        result, the <literal>user-settings</literal> module is
        imported very early in the Orca life cycle.</para>
      </section>
    </section>

    <section id="script"><title>Orca Scripts</title>
      <para>The <literal>orca</literal> module creates a single
      instance of a <literal>FocusTrackingPresenter</literal> (defined
      in the
      <literal>focus_tracking_presenter</literal> module), which manages
      all the scripts for Orca.</para>

      <para>Details on the <literal>FocusTrackingPresenter</literal>
      and Orca scripts can be found in the &scriptguidelink;.</para>
    </section>

    <section id="archsystemservices"><title>System Services</title>
      <para> Orca relies on existing system services to provide
      support for speech synthesis, braille, and screen magnification.
      To interact with these services, Orca provides the modules
      described in the following sections.</para>

      <section id="archspeech"><title>speech</title>
        <para>All speaking operations should be done by calling
        methods in the <literal>speech</literal> module.
        The <literal>speech</literal> module provides Orca's Python
        interface to system speech services.  Each speech service is
        generated by a "speech server factory."  There are currently
        three such factories: one for
        <citation><xref linkend="gnome-speech"
        endterm="gnome-speech.abbrev"/></citation> (see the
        <literal>gnomespeechfactory</literal> module), one for
        <citation><xref linkend="emacspeak"
        endterm="emacspeak.abbrev"/></citation> (see the
        <literal>espeechfactory</literal> module), and one for
        SpeechDispatcher (see
        the <literal>speechdispatcherfactory</literal> module).
        Currently, the only officially supported factory is the one
        provided by the <literal>gnomespeechfactory</literal>
        module.</para>
          
        <para>Each speech factory offers up a list of
        <literal>SpeechServer</literal>s, where each
        <literal>SpeechServer</literal> is typically an interface to
        a particular speech engine.  For example, the
        <literal>espeechfactory</literal> will offer up a
        <literal>SpeechServer</literal> that talks to the Fonix
        DECtalk engine and a <literal>SpeechServer</literal> that
        talks to the IBMTTS engine.  Likewise, the
        <literal>gnomespeechfactory</literal> will offer up a
        <literal>SpeechServer</literal> that uses the
        <literal>gnome-speech</literal> interface to talk to the
        eSpeak synthesis engine, a separate
        <literal>SpeechServer</literal> that also uses the
        <literal>gnome-speech</literal> interface to talk to the Fonix
        DECtalk engine, and so on.</para>

        <para>Each <literal>SpeechServer</literal> instance provides a
        set of methods for actually speaking. Many of the methods
        accepts an <literal>ACSS</literal> instance, which represents
        an aural cascading style sheet (<citation><xref linkend="acss"
        endterm="acss.abbrev"/></citation>) that defines the voice and
        voice parameter settings to use.</para>

        <para>As part of the <literal>orca-setup</literal> process,
        the user selects a particular speech factory,
        <literal>SpeechServer</literal>, and voice to use as their
        default voice.  When Orca starts, the
        <literal>speech</literal> module looks for these settings
        and connects to the appropriate speech factory and
        <literal>SpeechServer</literal>.  In the event the a
        connection cannot be made, the <literal>speech</literal>
        module attempts to find a working synthesis engine to use by
        examining its list of speech factories.  The
        <literal>speech</literal> module then provides simple methods
        that delegate to the <literal>SpeechServer</literal> instance.
        Although this model allows scripts to use their own
        <literal>SpeechServer</literal> instances if they wish,
        scripts typically just rely upon the user's default
        preferences.</para>

        <para>&note; Each Orca script has a
        single <literal>speechgenerator.SpeechGenerator</literal>
        instance to help generate text to be sent to
        the <literal>speech</literal> module.  More information on
        speech generators can be found in the
        &scriptguidelink;.</para>
      </section>

      <section id="archbraille"><title>braille</title>
        <para> The <literal>braille</literal> module provides Orca's
        Python interface to the system's BrlTTY
        <citation><xref linkend="brltty"
        endterm="brltty.abbrev"/></citation> daemon.  The BrlTTY
        daemon, in turn, provides the interface to braille devices
        for both displaying braille and receiving input from the
        user.</para>
        <para>&note; As with speech, each Orca script has a
        single <literal>braillegenerator.BrailleGenerator</literal>
        instance to help generate text to be sent to
        the <literal>braille</literal> module.  More information on
        braille generators can be found in the
        &scriptguidelink;.</para>
        <para>&todo; flesh this section out more.</para>
      </section>

      <section id="archmag"><title>mag</title>
        <para> The <literal>mag</literal> module
        provides Orca's Python interface to the system's gnome-mag
        <citation><xref linkend="gnome-mag"
        endterm="gnome-mag.abbrev"/></citation> CORBA service(s).  The
        magnification component provides methods that permit Orca
        discover screen magnification services and set their desktop
        region of interest.  The script is responsible for
        calling <literal>mag.magnifyAccessible</literal> with the
        appropriate parameters to set the magnifier's region of
        interest.</para>
        <para>&todo; flesh this section out more.</para>
      </section>
    </section>
  </chapter>
