<!-- Copyright 2005, Sun Microsystems, Inc. -->

<book>
  <title id="scriptguide">Orca Script Writing Guide</title>
  <bookinfo>
    &legal;
  </bookinfo>



  <!--
  ************************************************************************
  *                                                                      *
  * FORWARD                                                              *
  *                                                                      *
  ************************************************************************
  -->

  <preface><title>Foreword</title>
    &blurb;
    <para>This book is intended for programmers intending to
      extend Orca's functionality by writing custom scripts.
    </para>
  </preface>



  <!--
  ************************************************************************
  *                                                                      *
  * INTRODUCTION                                                         *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Introduction</title>

    <para>In this document, you will learn more about the Orca
      architecture as well as how to create your own custom scripts
      for Orca.</para>

    <para>The goal of scripting is to provide Orca with the capability
      of providing a natural feeling and compelling user experience
      for the various user interaction models of different desktop
      applications.</para>

    <para>The Orca scripting approach allows scripts to extend and/or
      override the behavior of other scripts, thus simplifying the job
      of a script writer.  To further facilitate script writing, Orca
      provides a "default" script that provides a reasonable default
      behavior for Orca.  This will not only serve as the "fallback
      script" for Orca, but will also typically serve as the "jumping
      off" point for writing custom scripts.  Furthermore, keep in
      mind that the "default" script is intended to cover a large
      variety of applications.  As such, you may find that it is
      not necessary to write a custom script.</para>
  </chapter>


  <!--
  ************************************************************************
  *                                                                      *
  * HIGH LEVEL OVERVIEW                                                  *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Overview</title>

    <para>The primary operating mode of Orca is "focus tracking
      mode," where Orca keeps track of the most relevant user
      interface object that has keyboard focus.  When Orca detects
      changes to this object, which Orca refers to as the "locus of
      focus," Orca will present relevant information to the user.</para>

    <para>As such, the primary goal of a script is to assist Orca in
      tracking of the locus of focus as well as presenting information
      about the locus of focus.  A script does this by registering for
      one or more AT-SPI events and then reacting appropriately when
      it receives those events.  A script can also intercept and
      interpret keystrokes and braille input events, allowing it to
      further extend the behavior of Orca.</para>

    <section><title>Script Contract</title>

      <para>The contract for a script is documented in detail in the
        pydoc of the <literal>Script</literal> class in the
        <literal>script.py</literal> module.  The
        <literal>Script</literal> subclass defined in the
        <literal>default.py</literal> module provides the default
        behavior for Orca when it encounters applications and toolkits
        that behave like the GTK toolkit.  It is expected that new
        scripts will typically extend the <literal>Script</literal>
        subclass of the <literal>default.py</literal> module rather
        than directly extending the <literal>Script</literal> class
        defined in the <literal>script.py</literal> module.</para>

    </section>

    <section><title>Script Life Cycle</title>

      <para>BIRTH: Orca's <literal>focus_tracking_presenter</literal>
        module is the sole maintainer of scripts. Whenever it receives
        an event from the AT-SPI Registry, the
        <literal>focus_tracking_presenter</literal> will determine the
        application associated with that event and create a new script
        for that application if on has not yet been created.  Only one
        script instance per application instance is allowed by the
        <literal>focus_tracking_presenter</literal>.</para>

      <para>The script creation process consists of the following
        steps:</para>

      <itemizedlist>
        <listitem>

          <para>The <literal>focus_tracking_presenter</literal> will
            attempt to perform a Python <literal>import</literal>
            using the application name as the name of an Orca module.
            For example, for the <literal>gnome-terminal</literal>
            application, the
            <literal>focus_tracking_presenter</literal> will look for
            the <literal>gnome-terminal.py</literal> in the
            <literal>orca.scripts</literal> package (see the script
            naming discussion in the <link linkend="debug">debug
            utilities section</link> to determine what to name your
            script).  If it cannot find such a module in the Python
            search path, the
            <literal>focus_tracking_presenter</literal> will then
            check in the <literal>orca</literal> package for a module
            matching the name of the toolkit used by the application.
            Failing that, Orca will create an instance of the
            <literal>Script</literal> class defined in the
            <literal>default.py</literal> module.</para>

          <para>&note; the <literal>focus_tracking_presenter</literal>
            also maintains a table to map application names to script
            names.  This is useful in many cases, such as if the
            application name changes over time or the application
            contains characters that are awkward in file system names.
            To extend or override this table, one can call the
            <literal>setScriptMapping</literal> method of the
            <literal>settings</literal> module.</para>

          <para>&detail; it is possible to tell Orca to bypass all
            custom script creation by setting
            <literal>orca.settings.enableCustomScripts=False</literal>
            in your <literal>~/.orca/user-settings.py</literal>
            module.  This can be useful for debugging purposes.</para>

        </listitem>
        <listitem>

          <para>Each script module is expected to provide a
            <literal>Script</literal> class that ultimately extends
            the <literal>orca.Script</literal> class defined in the
            <literal>script.py</literal> module.  The constructor
            takes the accessible application object as an
            argument.</para>

          <para>The constructor for the <literal>Script</literal>
            instance is expected to define any keystrokes, braille
            buttons, and AT-SPI event listeners it is interested in
            (see the <link linkend="customization">Customized
            Behavior</link> section for how to do this).</para>

        </listitem>
        <listitem>

          <para>Once it has created a script, the
            <literal>focus_tracking_presenter</literal> will register
            event listeners for all AT-SPI events associated with
            script (i.e., the script should not register these events
            itself).  When the
            <literal>focus_tracking_presenter</literal> receives the
            events, it will pass the event to the script associated
            with the event, regardless if the application associated
            with the script has focus or not.</para>

          <para>&detail; the
            <literal>focus_tracking_presenter</literal> registers its
            own <literal>processObjectEvent</literal> method as the
            AT-SPI event listener.  This method finds (and creates if
            necessary) the script associated with the event and passes
            the event onto the required
            <literal>processObjectEvent</literal> method of the script
            for processing.  Each <literal>Event</literal> (see the
            <literal>atspi</literal> module) has the following
            fields:</para>

          <itemizedlist>
            <listitem>
              <para><literal>source</literal>: an
                <literal>Accessible</literal> (see the
                <literal>atspi</literal> module) instance representing
                the object associated with the event</para>
            </listitem>
            <listitem>
              <para><literal>type</literal>: a string describing the
                event (e.g.,
                <literal>window:activated</literal>)</para>
            </listitem>
            <listitem>
              <para><literal>detail1</literal> and
                <literal>detail2</literal>: integer details for the
                event (see the AT-SPI documentation)</para>
            </listitem>
            <listitem>
              <para><literal>any_data</literal>: something associated
                with the event (see the AT-SPI documentation)</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>The <literal>focus_tracking_presenter</literal> also
            keeps track of the active script (as determined by the
            script associated with the currently active window) and
            will pass all keyboard and braille input events to the
            active script.</para>

          <para>&detail; the
            <literal>focus_tracking_presenter</literal> implements the
            <literal>processKeyboardEvent</literal> and
            <literal>processBrailleEvent</literal> methods which are
            called by the main <literal>orca</literal> module whenever
            it receives a keystroke or braille input event.  The
            <literal>focus_tracking_presenter</literal> will pass
            these events onto the
            <literal>processKeyboardEvent</literal> and
            <literal>processBrailleEvent</literal> methods of the
            active script.</para>

          <para>&detail; Because processing AT-SPI object events can
            be time consuming, and because the notification of AT-SPI
            object events is relatively "bursty," the
            <literal>focus_tracking_presenter</literal> maintains a
            queue of AT-SPI object and input device events. It adds
            the events to this queue when it receives them and
            processes the events on the GLib idle handling thread.
            This permits Orca to survive a relatively long burst of
            events and also allows it to handle the events on a thread
            that is compatible with GLib.</para>

        </listitem>
      </itemizedlist>

      <para>LIFE: Whenever a script receives an event, the script can do
        whatever it wants.  Its primary task, however, is to assist
        Orca in keeping track of the locus of focus.  When a script
        detects a change in the locus of focus, it should call
        <literal>orca.setLocusOfFocus</literal> with the
        <literal>Accessible</literal> object instance that is the new
        locus of focus.  Among other things, this results in the
	<literal>orca_state.locusOfFocus</literal> field being updated.</para>

      <para>&note; The <literal>orca_state.locusOfFocus</literal>
        field is intended to be set only via the
        <literal>setLocusOfFocus</literal> method of the
        <literal>orca</literal> module. Because the
        <literal>setLocusOfFocus</literal> method performs bookkeeping
        and other tasks, the
        <literal>orca_state.locusOfFocus</literal> field should never
        be set directly.</para>

      <para>&detail; The <literal>orca</literal> module has logic to
        detect if the locus of focus really changed and will propagate
        the change on as appropriate.  The
        <literal>orca.setLocusOfFocus</literal> method first sends the
        change to the <literal>locusOfFocusChanged</literal> method of
        the <literal>focus_tracking_presenter</literal>, which then
        passes the change onto the required
        <literal>locusOfFocusChanged</literal> method of the active
        script. The <literal>locusOfFocusChanged</literal> method is
        the primary place where a script will present information to
        the user.</para>

      <para>In many cases, the locus of focus doesn't change, but some
        property of the current locus of focus changes.  For example,
        a checkbox is checked or unchecked, yet remains as the locus
        of focus.  In these cases, a script should also keep Orca
        informed by calling
        <literal>orca.visualAppearanceChanged</literal>.</para>

      <para>&detail; Like the <literal>locusOfFocusChanged</literal>
        method, the <literal>visualAppearanceChanged</literal> method
        of the <literal>orca</literal> module will first call the
        <literal>visualAppearanceChanged</literal> method of the
        <literal>focus_tracking_presenter</literal>, which will then
        call the required <literal>visualAppearanceChanged</literal>
        of the active script.  The
        <literal>visualAppearanceChanged</literal> is the primary
        place where a script will present such information to the
        user.</para>

      <para>DEATH: Whenever the
        <literal>focus_tracking_presenter</literal> detects that an
        application has gone away (by determining that the application
        has been removed from the desktop), it will delete the script
        for that application and unregister any event listeners
        associated with that script.</para>

      <para>&detail; the <literal>focus_tracking_presenter</literal>
        determines an application has gone away by detecting a 
        <literal>object:children-changed:remove</literal> event on
        the desktop.</para>

    </section>

  </chapter>
    

  <!--
  ************************************************************************
  *                                                                      *
  * CUSTOMIZED BEHAVIOR                                                  *
  *                                                                      *
  ************************************************************************
  -->

  <chapter id="customization"><title>Customized Behavior</title>

    <para>&note; THIS WILL CHANGE POST V1.0.  In particular, the
      method for setting up event handlers and keyboard/braille
      bindings will be changed so as to allow for easier customization
      of these bindings.  As such, the information in this chapter is
      here only for historical purposes.</para>

    <para>The customized behavior of a script is set up in its
      constructor.  In its constructor, each script is expected to
      extend/override several fields as illustrated in the following
      diagram and describe below:</para>

    <figure>
      <title>Orca Script Diagram</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="script.jpg" format="JPEG">
          </imageobject>
          <textobject>
            <phrase>Orca Script Diagram</phrase>
          </textobject>
        </mediaobject>      
    </figure>

    <itemizedlist>
      <listitem>
        <para><literal>listeners</literal>: a dictionary where the
          keys are strings that match AT-SPI event types (e.g.,
          <literal>focus:</literal>,
          <literal>object:text-caret-moved</literal>, etc.), and the
          values are functions to handle the event.  Each function
          is passed an <literal>Event</literal> instance (see the
          <literal>atspi.py</literal> module) as its sole
          parameter and no return value is expected.</para>
      </listitem>
      <listitem>
        <para><literal>keybindings</literal>: an instance of 
          <literal>keybindings.KeyBindings</literal> (see
          the <literal>keybindings.py</literal> module) that defines
          the keystrokes the script is interested in.</para>
      </listitem>
      <listitem>
        <para><literal>braillebindings</literal>: a dictionary where
          the keys are BrlTTY commands (e.g., <literal>CMD_HWINLT</literal>,
          defined in <literal>braille.py</literal>), and the values are
          <literal>InputEventHandler</literal> instances.</para>
      </listitem>
    </itemizedlist>

    <para>The constructor for the <literal>Script</literal> class,
      which all scripts should ultimately extend (most will extend the
      <literal>Script</literal> subclass of the <literal>default.py</literal>
      module, which in turn extends
      <literal>Script</literal> class of the <literal>script.py</literal>
      module), sets up empty values for each of
      these fields.  As such, a subclass merely needs to
      extend/override these fields.  Each of these fields is described
      in more detail in the following sections.</para>

    <section><title>Defining Event Listeners</title> 

      <para>As described above, the <literal>listeners</literal> field
        is a dictionary where the keys are strings that match AT-SPI
        event types (e.g., <literal>focus:</literal>,
        <literal>object:text-caret-moved</literal>, etc.), and the
        values are functions to handle the event.  A script's
        constructor can modify/extend this dictionary by merely
        defining an entry:</para>

<programlisting>
self.listeners["focus:"] = self.onFocus
</programlisting>

      <para>In the event there is already an entry in the
        <literal>listeners</literal> dictionary, it will be overridden
        by the new value.</para>

      <para>As described previously, the
        <literal>focus_tracking_presenter</literal> will register
        listeners on behalf of a script, and will notify the script of
        any events via the script's
        <literal>processObjectEvent</literal> method.  The
        <literal>processObjectEvent</literal> method of the top level
        <literal>Script</literal> class examines the
        <literal>type</literal> field of the given
        <literal>event</literal>, calling any matching functions from
        the <literal>listeners</literal> dictionary.  As such, it is
        unlikely that a <literal>Script</literal> subclass will ever
        need to override the <literal>processObjectEvent</literal>
        method.  Instead, it merely needs to populate the
        <literal>listeners</literal> dictionary as appropriate.</para>

      <para>The function for an event listener merely takes an
        <literal>Event</literal> instance (see the
        <literal>atspi.py</literal> module) and does whatever it
        wants; the return value is ignored.  For example, the function
        definition associated with the above
        <literal>listeners</literal> entry might look like the
        following, where the <literal>event</literal> is described
        above:</para>

<programlisting>
def onFocus(self, event):
    """Called whenever an object gets focus.
        
    Arguments:
    - event: the Event
    """

    ...
    orca.setLocusOfFocus(event, event.source)
    ...
</programlisting>

    </section>

    <section><title>Input Event Handlers</title>

      <para>Before describing how to set up keyboard and braille event
        handlers, it is import to first understand the
        <literal>InputEventHandler</literal>, which is defined in the
        <literal>input_event.py</literal> module.
        <literal>InputEventHandler</literal>s serve a purpose of
        holding a function to call for a particular input event, and a
        human consumable string that provides a short description of
        the function's behavior.  The main purpose of the
        <literal>InputEventHandler</literal> is to provide support for
        the "learn mode" of Orca.  If learn mode is enabled, the input
        event handler will consume the input event (i.e., return True)
        and merely speak and braille the human consumable string. If
        learn mode is not enabled, the input event handler will pass
        the active script and the input event on to the function,
        returning the boolean value of the function as indication of
        whether the event should be consumed by Orca or passed on to
        the application.</para>

      <para>The best place to look for examples of
        <literal>InputEventHandler</literal>s is in the
        <literal>default.py</literal> module.  For example, this
        module defines an input event handler for telling the flat
        review context to move to the home position of a
        window:</para>

<programlisting>
reviewHomeHandler = input_event.InputEventHandler(
            Script.reviewHome,
            _("Moves flat review to the home position."))
</programlisting>

      <para>In this definition, <literal>default.py</literal> is creating
        an <literal>InputEventHandler</literal> instance whose function is
        the Script's method, <literal>reviewHome</literal> and whose 
        human consumable text describes what will happen.  The Script's
        <literal>reviewHome</literal> method is defined as follows:</para>

<programlisting>
def reviewHome(self, inputEvent):
    """Moves the flat review context to the top left of the current
    window."""
    context = self.getFlatReviewContext()
    context.goBegin()
    self.reviewCurrentLine(inputEvent)
    self.targetCursorCell = braille.cursorCell
    return True
</programlisting>

      <para>Note that the method returns <literal>True</literal> to
        indicate the input event has been consumed.</para>

    </section>

    <section><title>Defining Keyboard Bindings</title>

      <para>The keyboard bindings for a script are held in the
        <literal>keybindings</literal> field, which is a
        <literal>KeyBindings</literal> instance.  This field maintains
        a set of <literal>KeyBinding</literal> instances.</para>

      <para>Keyboard bindings merely define the keystroke and modifier
        circumstances needed to invoke an
        <literal>InputEventHandler</literal> instance.  This definition
        is held in a <literal>KeyBinding</literal> instance (see the
        <literal>keybindings.py</literal> module):</para>

<programlisting>
self.keybindings.add(
    keybindings.KeyBinding("KP_7",
                           1 << orca.MODIFIER_ORCA,
                           1 << orca.MODIFIER_ORCA,
                           reviewHomeHandler))
</programlisting>

      <para>The first parameter of a <literal>KeyBinding</literal> is
        a string that represents an X Window System KeySym string for
        the key.  This is typically a string from
        <literal>/usr/include/X11/keysymdef.h</literal> with the
        preceding 'XK_' removed (e.g., XK_KP_Enter becomes the string
        'KP_Enter'), and is used as a means to express the physical
        key associated with the KeySym.</para>

      <para>The second parameter is a bit mask that defines which
        modifiers the keybinding cares about.  If it does not care
        about any modifier state, then this mask can be set to 0.  In
        the example above, the keybinding is being told to pay
        attention to the <literal>MODIFIER_ORCA</literal> modifier,
        which is a modifier Orca sets when the "Insert" key is
        pressed.  Other examples of modifier bit positions include
        those defined in the AT-SPI Accessibility specification:
        MODIFIER_SHIFT, MODIFIER_SHIFTLOCK, MODIFIER_CONTROL,
        MODIFIER_ALT, MODIFIER_META, MODIFIER_META2, MODIFIER_META3,
        and MODIFIER_NUMLOCK.  These can be obtained via the
        <literal>orca.atspi.Accessibility</literal> field.  For
        example,
        <literal>orca.atspi.Accessibility.MODIFIER_SHIFTLOCK</literal>.</para>

      <para>The third parameter is a bit mask that defines what the
        modifier settings must be.  If a bit is set, it means the
        associated modifier must be set.  The only meaningful bits in
        this mask are those that are defined by the second
        parameter.  In the example above, the keybinding cares
        about the <literal>MODIFIER_ORCA</literal> modifier, and
        the third parameter says this modifier must be set.</para>

      <para>The last parameter is the
        <literal>InputEventHandler</literal> to us if the user types a
        keystroke qualified by the previous
        parameters. <literal>InputEventHandler</literal>s are
        described in the previous section.</para>
    </section>

    <section><title>Defining Braille Bindings</title>

      <para>Refreshable braille displays have buttons that the user
        can press.  The BrlTTY system provides a means for
        standardizing the types of input events one can generate using
        these buttons, and a script can set up braille bindings to
        handle these events.</para>

      <para>The braille bindings for a script are held in the
        <literal>braillebindings</literal> field, which is a
        dictionary.  The keys for the dictionary are BrlTTY constants
        representing braille input events (see
        <literal>braille.py</literal> for a list), and the values are
        <literal>InputEventHandler</literal> instances:</para>

<programlisting>
self.braillebindings[braille.CMD_TOP_LEFT] = reviewHomeHandler
</programlisting>

      <para>In the above example, the BrlTTY
        <literal>braille.CMD_TOP_LEFT</literal> input event has been
        set to be handled by the same
        <literal>reviewHomeHandler</literal> instance described
        previously.</para>

    </section>
  </chapter>

  <!--
  ************************************************************************
  *                                                                      *
  * SCRIPT HELPER UTILITIES                                              *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Script Utilities</title>

    <para>There are many common things a script wants to do: generate
      speech, update braille, etc.  In addition, there are many common
      things a script writer wants to do, especially getting debug
      output to determine just what the AT-SPI is sending it.  This
      chapter discusses the debug utilities of Orca as well as a
      variety of utilities to assist a script in managing speech,
      braille, and magnification.</para>
    
    <section id="debug"><title>Debug Utilities</title>

      <para>The debug utilities (defined in the
        <literal>debug.py</literal> module) of Orca provide a means
        for selectively turning on information to be sent to the
        console where Orca is running.  This information is quite
        useful in determining what is happening inside Orca as well as
        what the AT-SPI is sending to Orca.</para>

      <para>Let's begin the discussion of the debug utilities with the
        top question on any script writer's mind: "What do I name my
        script?"  As you may recall, the name of a script is based
        upon the name of the application as given to us by the AT-SPI.
        One of the easy ways to determine this is to listen for
        <literal>window:activate</literal> events that will be issued
        when an application is started.  These events can then be used
        to determine the name of the application.</para>

      <para>Fortunately, the
        <literal>focus_tracking_presenter</literal> already registers
        for <literal>window:activate</literal> events, so all you need
        to do is tell Orca to print these events out when it receives
        them.  The method for doing this involves telling the debug
        utilities what to do, and this can be done by modifying your
        <literal>~/.orca/user-settings.py</literal>.</para>

      <para>There are two main settings to tell Orca to print out
        events: an event filter and an event debug level.  The event
        filter is a regular expression that is used to match AT-SPI
        event types, and the event debug level specifies a threshold
        for when to actually print information to the console (for
        more complete detail on these settings, refer to
        <literal>debug.py</literal>).  These settings can be modified
        by adding the following lines to your
        <literal>~/.orca/user-settings.py</literal>:</para>

      <programlisting>
orca.debug.setEventDebugFilter(re.compile('window:activate'))
orca.debug.setEventDebugLevel(debug.LEVEL_OFF)
      </programlisting>

      <para>Now, when you rerun Orca, it will output information
        whenever it receives a <literal>window:activate</literal>
        event from the AT-SPI registry.  For example, if you run Star
        Office, you should see output similar to the following:</para>

      <programlisting>
OBJECT EVENT: window:activate detail=(0,0) 
              app='StarOffice' name='StarOffice' role='frame' 
              state='ENABLED FOCUSABLE RESIZABLE SENSITIVE SHOWING VISIBLE'
      </programlisting>

      <para>The string <literal>app='StarOffice'</literal> indicates
        the name of the application is 'StarOffice.'  As such, if you
        wanted to write a custom script, you would call it
        <literal>StarOffice.py</literal>.</para>

      <para>&note; you can also get other information while Orca is
        running by pressing the debug keystrokes:</para>

        <itemizedlist>
          <listitem>
	    <para>Insert+F5: dump a list of all applications to the
	      console</para>
	  </listitem>
          <listitem>
	    <para>Insert+F6: speak/braille information about the active
	      script and application with focus</para>
	  </listitem>
          <listitem>
	    <para>Insert+F7: dump the ancestors of the object with focus
	      to the console</para>
	  </listitem>
          <listitem>
	    <para>Insert+F8: dump the entire widget hierarchy of the 
	      application with focus to the console</para>
	  </listitem>
        </itemizedlist>

      <para>The debug module also includes a number of other methods,
        each of which is described in more detail in
        <literal>debug.py</literal>.  Note that each method includes a
        debug level threshold.  The <literal>debug.py</literal> module
        has a description of various level settings and what to expect
        for output.</para>

      <itemizedlist>
        <listitem>
          <para><literal>setDebugLevel(newLevel)</literal>: sets the
            debug level threshold, turning on or off the various debug
            code built in to the various Orca modules.  This is
            typically called from
            <literal>~/.orca/user-settings.py</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>setEventDebugLevel(newLevel)</literal>:
            described above; typically called from
            <literal>~/.orca/user-settings.py</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>setEventDebugFilter(regExpression)</literal>:
            described above; typically called from
            <literal>~/.orca/user-settings.py</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>printException(level)</literal>: if an
            exception is caught, this can be used to print out detail
            about it</para>
        </listitem>
        <listitem>
          <para><literal>printStack(level)</literal>: prints the
            current stack; useful for determining when and why a code
            path is being executed</para>
        </listitem>
        <listitem>
          <para><literal>println(level, text)</literal>: prints the
            given text; useful for general debug output</para>
        </listitem>
        <listitem>
          <para><literal>printObjectEvent(level, event)</literal>:
            prints out the given AT-SPI event</para>
        </listitem>
        <listitem>
          <para><literal>printObjectEvent(level, event)</literal>:
            prints out the given AT-SPI event, using the event debug
            level as an additional threshold; this is already used by
            the <literal>focus_tracking_presenter</literal>, so you
            are unlikely to need it</para>
        </listitem>
        <listitem>
          <para><literal>printInputEvent(level, string)</literal>:
            prints out the given AT-SPI event, using the event debug
            level as an additional threshold; this is already used by
            <literal>orca.py</literal> (for keyboard events) and
            <literal>braille.py</literal> (for braille events), so you
            are unlikely to need it</para>
        </listitem>
      </itemizedlist>

      <para>&note; One debug level of interest is
        <literal>debug.LEVEL_FINE</literal>.  This level will tell you
        when a script is activated, and can be useful to determine if
        Orca is actually finding your script!  For example, when the
        script for the <literal>gnome-terminal</literal> is activated
        by the <literal>focus_tracking_presenter</literal>, you will
        see the following output:</para>

      <programlisting>
ACTIVE SCRIPT: gnome-terminal (module=orca.scripts.gnome-terminal)
      </programlisting>

      <para>Notice that the class of the script instance is included.
        If you determine that this class is not what you expect when
        you are developing your custom script, then something went
        wrong when trying to find or load your custom script.  This
        can often happen because Python performs a lot of late binding
        and compilation, thus errors are often not encountered until a
        specific code path is executed at run time.  You can tell the
        <literal>focus_tracking_presenter</literal> to give you more
        information about any possible failures or exceptions it
        handles in this area by setting the debug level to
        <literal>debug.LEVEL_FINEST</literal>.</para>

    </section>

    <section><title>Speech Synthesis</title>

      <para>Orca provides two main modules for speech output:
      <literal>speech.py</literal> and
      <literal>speechgenerator.py</literal>. The
      <literal>speech.py</literal> module provides the main interface
      to the speech synthesis subsystem. The
      <literal>speechgenerator.py</literal> module provides a
      <literal>SpeechGenerator</literal> class that can be used to to
      actually generate the text to be spoken for various objects.
      The expected use of the two modules is as follows: a script will
      create its own instance of a
      <literal>SpeechGenerator</literal> and will use it to generate
      text.  The script will then pass this text to the
      <literal>speech.py</literal> module to be spoken.</para>

      <section><title><literal>speech.py</literal></title>
 
        <para>For the purposes of script writing, the main entry
          points of the <literal>speech.py</literal> module are
          <literal>speak</literal>,
          <literal>speakUtterances</literal>, and
          <literal>stop</literal></para>

        <para>See the <literal>speech.py</literal> module for more
          information.</para>

      </section>

      <section><title><literal>speechgenerator.py</literal></title>

        <para>The primary goal of a <literal>SpeechGenerator</literal>
          is to create text to be spoken for an accessible object.
          There are two public entry points into a
          <literal>SpeechGenerator</literal>:</para>

        <itemizedlist>
          <listitem>
            <para><literal>getSpeech(obj, already_focused)</literal>:
              returns a list of strings to be spoken
              for the given accessible object.  The
              <literal>already_focused</literal> boolean parameter
              provides a hint to the speech generator about how much
              text to generate.  For example, if a check box that
              already has focus is to be spoken, usually the reason
              for this is that the state changed between checked and
              unchecked.  As a result, an appropriate thing to do in
              this situation is to only speak the new change in
              state (e.g., "checked").</para>              
          </listitem>
          <listitem>
            <para><literal>getSpeechContext(obj,
              stopAncestor)</literal>: returns a list
              of strings to be spoken that describe the visual context
              of the given accessible object.  This is loosely
              represented by the hierarchical relationship of the
              object (i.e., the "Quit" button in the "File" menu in
              the ...), and the amount of information can be contained
              by specifying an accessible
              <literal>stopAncestor</literal> above which we do not
              want to know anything about.  The primary use of this
              method is to provide the user with feedback regarding
              the relevant visual context information that changed
              when the locus of focus changes, but this method is also
              useful for assisting in "where am I" queries.</para>
          </listitem>
        </itemizedlist>

        <para>&note; Orca currently provides some level of support for
          verbosity via the <literal>VERBOSITY_LEVEL</literal> fields
          of the <literal>settings.py</literal> module.  There are
          currently two verbosity levels:
          <literal>VERBOSITY_LEVEL_BRIEF</literal> and
          <literal>VERBOSITY_LEVEL_VERBOSE</literal>.  A
          <literal>SpeechGenerator</literal> subclass is expected to
          examine the <literal>speechVerbosityLevel</literal> property
          of the <literal>settings.py</literal> module and provide the
          appropriate level of text:</para>

        <programlisting>
if settings.speechVerbosityLevel == settings.VERBOSITY_LEVEL_VERBOSE:
    utterances.append(rolenames.getSpeechForRoleName(obj))
        </programlisting>
      </section>

    </section>

    <section><title>Braille Output</title>

      <para>Like speech, Orca provides two main modules for braille:
      <literal>braille.py</literal> and
      <literal>braillegenerator.py</literal>. The
      <literal>braille.py</literal> module provides the main interface
      to the braille display. The
      <literal>braillegenerator.py</literal> module provides a
      <literal>BrailleGenerator</literal> class that can be used to to
      actually generate the text to be displayed for various objects.
      The expected use of the two modules is as follows: a script will
      create its own instance of a
      <literal>BrailleGenerator</literal> and will use it to braille
      regions.  The script will then pass these braille regions to the
      <literal>braille.py</literal> module to be displayed.</para>

      <section><title><literal>braille.py</literal></title> 
        <para>&todo; [[[WDW - much writing to be done here, especially
          regarding how regions will provide automatic support for
          cursor routing keys.]]]</para>
      </section>

      <section><title><literal>braillegenerator.py</literal></title>
        <para>The primary goal of a <literal>BrailleGenerator</literal>
          is to create text to be displayed for an accessible object.
          There are two public entry points into a
          <literal>BrailleGenerator</literal>:</para>

        <itemizedlist>
          <listitem>
            <para><literal>getBrailleRegions(obj,
              groupChildren=True)</literal>: returns a list of two
              items: the first is an ordered list of braille
              <literal>Region</literal> instances that represent text
              to be displayed on the braille display, left-to-right on
              one line; and the second is an element from the first
              list that represents which <literal>Region</literal> has
              "focus" and should be represented by the braille cursor
              on the display.</para>
            <para>&todo; [[[WDW - describe grouping of children.]]]</para>
          </listitem>
          <listitem>
            <para><literal>getBrailleContext(obj)</literal>: returns
              an ordered list (i.e., an array) of braille
              <literal>Region</literal> instances that describe the
              visual context of the given accessible object.  This is
              loosely represented by the hierarchical relationship of
              the object (i.e., the "Quit" button in the "File" menu
              in the ...).</para>
          </listitem>
        </itemizedlist>

        <para>Typically, a script will "build up" a single logical
          line of text for the braille display.  The beginning of this
          line will be the result of the call to
          <literal>getBrailleContext</literal> and the remainder of
          the line will be the result of one or more calls to
          <literal>getBrailleRegions</literal>.  Since the logical
          line will typically be longer than the number of cells on
          the braille display, the <literal>braille.py</literal>
          module will scroll to show the braille
          <literal>Region</literal> with focus.  Furthermore, the
          <literal>braille.py</literal> will also respond to BrlTTY
          input events to allow the user to use braille display input
          buttons for scrolling to review the entire line.</para>

        <para>&note; Orca currently provides some level of support for
          verbosity via the <literal>VERBOSITY_LEVEL</literal> fields
          of the <literal>settings.py</literal> module.  There are
          currently two verbosity levels:
          <literal>VERBOSITY_LEVEL_BRIEF</literal> and
          <literal>VERBOSITY_LEVEL_VERBOSE</literal>.  A
          <literal>BrailleGenerator</literal> subclass is expected to
          examine the <literal>brailleVerbosityLevel</literal> property
          of the <literal>settings.py</literal> module and provide the
          appropriate level of text:</para>

        <programlisting>
if settings.brailleVerbosityLevel == settings.VERBOSITY_LEVEL_VERBOSE:
    regions.append(braille.Region(
                   " " + rolenames.getBrailleForRoleName(obj)))
        </programlisting>

      </section>

    </section>

  </chapter>

</book>
