<!-- Copyright 2005, Sun Microsystems, Inc. -->

<book>
  <title>Orca Script Writing Guide</title>
  <bookinfo>
    &legal;
  </bookinfo>



  <!--
  ************************************************************************
  *                                                                      *
  * FORWARD                                                              *
  *                                                                      *
  ************************************************************************
  -->

  <preface><title>Foreword</title>
    &blurb;
    <para>This book is intended for programmers intending to
      extend Orca's functionality by writing custom scripts.
    </para>
  </preface>



  <!--
  ************************************************************************
  *                                                                      *
  * INTRODUCTION                                                         *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Introduction</title>

    <para>In this document, you will learn how to create your own 
      custom scripts for Orca.</para>

    <para>Orca's scripting approach provides a mechanism for providing
      customized support for the specific user interaction model of an
      application.  The goal is to provide Orca with the capability of
      providing a natural feeling and compelling user experience for
      the various user interaction models of different desktop
      applications.</para>

    <para>The Orca scripting approach allows scripts to extend and/or
      override the behavior of other scripts, thus simplifying the job
      of a script writer.  To further facilitate script writing, Orca
      provides a "default" script that provides a reasonable default
      behavior for Orca.  This will not only serve as the "fallback
      script" for Orca, but will also typically serve as the "jumping
      off" point for writing custom scripts.</para>
  </chapter>


  <!--
  ************************************************************************
  *                                                                      *
  * HIGH LEVEL OVERVIEW                                                  *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Overview</title>

    <para>The primary operating mode of Orca is the "focus tracking
      mode," where Orca keeps track of the most relevent user
      interface object that has keyboard focus.  When Orca detects
      changes to this object, which Orca refers to as the "locus of
      focus," Orca will present relevant information to the user.</para>

    <para>As such, the primary goal of a script is to assist Orca in
      tracking of the locus of focus as well as presenting information
      about the locus of focus.  A script does this by registering for
      one or more AT-SPI events and then reacting appropriately when
      it receives those events.  A script can also intercept and
      interpret keystrokes and braille input events, allowing it to
      further extend the behavior of Orca.</para>

    <section><title>Script Lifecycle</title>

      <para>BIRTH: Orca's "focus_tracking_presenter" module is the
        sole maintainer of scripts. Whenever it receives a "window
        activated" event from the AT-SPI Registry, the
        focus_tracking_presenter will determine the application
        associated with that event and create a script for that
        application if necessary.  Only one script instance per
        application is managed by the focus_tracking_presenter.</para>

      <para>The script creation process consists of the following
        steps:</para>

      <itemizedlist>
        <listitem>
          <para>The focus_tracking_presenter will attempt to perform a
            Python "import" using the application name as the name of
            an Orca module.  For example, for the gnome-terminal
            application, it will look for gnome-terminal.py.  If it
            cannot find such a module in the Python search path, the
            focus_tracking_presenter will create an instance of the
            "Default" script in default.py.</para>
          <para>&note; it is possible to tell Orca to bypass all custom
            script creation by setting useCustomScripts=False
            in your ~/.orca/user-settings.py.  This can be useful for
            debugging purposes.</para>
        </listitem>
        <listitem>
          <para>Each script module is expected to provide a
            "getScript" method that takes the accessible application
            object as an argument.  This method is essentially a
            factory method that returns an instance of a Script
            (defined in script.py) or Script subclass.  The
            constructor for the Script instance is expected to define
            any keystrokes, braille buttons, and AT-SPI event
            listeners it is interested in.</para>
        </listitem>
        <listitem>
          <para>The focus_tracking_presenter will then register event
            listeners for all AT-SPI events associated with script.
            When the focus_tracking_presenter receives the events, it
            will pass the event directly to the script associated with
            the event, regardless if the application associated with
            the script has focus or not.</para>
          <para>&detail; the focus_tracking_presenter registers its
            own "processObjectEvent" method as the AT-SPI event
            listener.  This method finds (and creates if necessary)
            the script associated with the event and passes the event
            onto the required "processObjectEvent" method of the
            script for processing.  The event has the following
            fields:</para>
          <itemizedlist>
            <listitem>
              <para>type: a string describing the event (e.g., 
                "window:activated")</para>
            </listitem>
            <listitem>
              <para>detail1, detail2: integer details for the event 
                (see the AT-SPI documentation)</para>
            </listitem>
            <listitem>
              <para>any_data: something associated with the event 
                (see the AT-SPI documentation)</para>
            </listitem>
            <listitem>
              <para>source: the Accessible object associated with the 
                event</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>The focus_tracking_presenter also keeps track of the
            active script (as determined by the script associated
            with the currently active window) and will pass all
            keyboard and braille input events to the active
            script.</para>
          <para>&detail; the focus_tracking_presenter implements the
            "processKeyboardEvent" and "processBrailleEvent" methods
            which are called by the main orca module whenever it
            receives a keystroke or braille input event.  The
            focus_tracking_presenter will pass these events onto the
            required "processKeyboardEvent" or "processBrailleEvent"
            methods of the active script.</para>
          <para>&detail; the focus_tracking_presenter provides logic
            to allow the user's ~/.orca/user-settings.py module to
            extend and/or override key and braille bindings.
            This logic is currently latent, however, and is not
            documented or supported.</para>
        </listitem>
      </itemizedlist>

      <para>LIFE: Whenever a script receives an event, it can do
        whatever it wants.  Its primary task, however, is to assist
        Orca in keeping track of the locus of focus.  When a script
        detects a change in the locus of focus, it should call
        orca.setLocusOfFocus with the Accessible object that is the
        new locus of focus.</para>

      <para>&detail; The orca module has logic to detect if the locus
        of focus really changed and will propagate the change on as
        appropriate.  The change is first sent to the
        "locusOfFocusChanged" method of the focus_tracking_presenter,
        which then passes the change onto the required
        "locusOfFocusChanged" method of the active script. The 
        "locusOfFocusChanged" method is the primary place where a
        script will present information to the user.</para>

      <para>In many cases, the locus of focus doesn't change, but some
        property of the current locus of focus changes.  For example,
        a checkbox is checked or unchecked, yet remains as the locus
        of focus.  In these cases, a script should also keep Orca
        informed by calling orca.visualAppearanceChanged.</para>

      <para>&detail; Like the locusOfFocusChanged method, the
        "visualAppearanceChanged" method of the orca module will first
        call the "visualAppearanceChanged" method of the
        focus_tracking_presenter, which will then call the required
        "visualAppearanceChanged" of the active script.  The
        "visualAppearanceChanged" is the primary place where a script
        will present information to the user.</para>

      <para>DEATH: Whenever the focus_tracking_presenter detects that
        an application has gone away (by determining that the
        application has been removed from the desktop), it will delete
        the script for that application and unregister any event
        listeners associated with that script.</para>
    </section>

    <section><title>Script Contract</title>
      <para>The contract for a script is documented in detail in
        the script.py module.</para>      
    </section>

  </chapter>
    
      
  <!--
  ************************************************************************
  *                                                                      *
  * SCRIPT HELPER UTILITIES                                              *
  *                                                                      *
  ************************************************************************
  -->

  <chapter><title>Script Utilities</title>

    <para>There are many common things a script wants to do: generate
      speech, update braille, etc.  In addition, there are many common
      things a script writer wants to do, especially getting debug
      output to determine just what the AT-SPI is sending it.</para>
    
    <section><title>Debug Utilities</title>
      <para>&todo; write up various debug utilities and how to enable
        them.  Also include a "how the heck do I determine what to call
        my script" section.</para>
    </section>

    <section><title>Speech Output (Say Something)</title>
      <para>&todo; write up the interface to speech synthesis.</para>
    </section>

    <section><title>Speech Generation (What Do I Say)</title>
      <para>&todo; write up the interface to the speech generator
        module and how it can be used to generate strings for
        objects.</para>
    </section>

    <section><title>Braille Output (Write Something)</title>
      <para>&todo; write up the interface to braille output.</para>
    </section>

    <section><title>Braille Generation (What Do I Write)</title>
      <para>&todo; write up the interface to the braille generator
        module and how it can be used to generate strings for
        objects.</para>
    </section>

    <section><title>Key Bindings</title>
      <para>&todo; write up how to define keybindings.</para>
    </section>

    <section><title>Braille Bindings</title>
      <para>&todo; write up how to define braille bindings.</para>
    </section>

  </chapter>

</book>
