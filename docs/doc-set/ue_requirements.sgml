<!-- Copyright 2005, Sun Microsystems, Inc. -->

  <!--
  ************************************************************************
  *                                                                      *
  * USER REQUIREMENTS                                                    *
  *                                                                      *
  ************************************************************************
  -->

  <chapter id="userrequirements"><title>User Requirements and
    Functional Description</title>

    <para>Based upon discussions with end users as well as the tasks
      and ideas from the &personaslink;, Orca must supply at least the
      following end-user features.</para>

    <section id="uravailable"><title>Availability at All Times</title>

      <para>Orca will often be the only vehicle by which many users
        will be able to access the system.  As such, it must be
        available at all times, including at system login, 
        screen-saver screens and system administration screens requiring root access.</para>

      <para>Orca must also be available after the system returns from
        "standby" or "sleep" mode.</para>

      <para>Finally, in the event the user's choice of speech synthesis
        engine becomes unavailable (e.g., expired license), Orca must
        attempt to find and use an alternative synthesis engine.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.2.2. LOGIN: Orca will rely upon the accessible
          login feature of gdm to enable access at login.  This
          feature has been tested and verified on Open Solaris with
          Orca V0.2.2.  It still does not seem to work in Linux.</para>

        <para>&complete; V0.2.2. SCREEN SAVER: Orca will announce that
          the "AT Enabled Lock Dialog" is active and you can type your
          password.</para>

      </section>
    </section>

    <section id="urresilient"><title>Failure Resiliency</title>

      <para>In the event that Orca fails or a component of the
        system that Orca depends upon fails, the system should be able
        to heal (and perhaps restart) itself appropriately.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.9.0.  Orca provides a script that will
        restart Orca in the event of catastrophic failure, and it also
        periodically pings and restarts Orca if necessary.
        Furthermore, Orca will also detect hangs inside itself and
        quit if possible.</para>

      </section>
    </section>

    <section id="urkeynav"><title>Seamless Interaction with Traditional Keyboard Navigation
      Methods</title>
      <para>Orca must allow users to navigate through the desktop and
        applications on the desktop using the system keyboard
        navigation gestures (e.g., Alt+Tab to select the next window).
        In other words, Orca must not interfere with traditional
        keyboard navigation.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.2.3. Orca defines keystrokes for the keypad
          and also makes special used of the "Insert" key as the Orca
          modifier key.  Orca also provides an "orcaModifierKeys"
          customization setting to allow the user to override the Orca
          modifier key.  This setting contains a list of key strings
          that represent the key to be used as the Orca modifier key.
          See the &ugcustomizationlink; section of the &userguidelink;
          for more information.</para>

        <para>&complete; V0.2.2. Furthermore, while the keystrokes
          generally do not interfere with normal and traditional
          keyboard navigation techniques built into the desktop, these
          keystrokes can be overridden and extended if necessary.  See
          the &ugcustomizationlink; section of the &userguidelink; for
          more information.</para>

      </section>

    </section>

    <section id="urinteroperable"><title>Seamless Interaction with Other Assistive
      Technologies</title>

      <para>It is not uncommon for users to simultaneously use other
        assistive technologies, such as the AccessX features of XKB
        <citation><xref linkend="accessx"
        endterm="accessx.abbrev"/></citation>, to access their displays.
        As such, Orca must be able to co-exist (i.e., not interfere)
        with other assistive technologies in use by the user.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.9.0. [OWNER: LMS] Orca has been simultaneously
          tested with BrlTTY, GOK, and Dasher and AccessX.</para>

      </section>

    </section>

    <section id="urstyle"><title>Consistent Style</title>

      <para> It is expected that access to applications will be driven
        primarily via customized "scripts," with a fallback
        ("default") script to be used in the absence of a customized
        script.</para>

      <para>While each script can provide dramatically different
        access to an application, it is expected that scripts will
        provide users with a consistent style to access
        applications.  To help with this consistent style, Orca will
        provide a &styleguidelink;, a well-documented "default"
        script, and several application scripts that demonstrate and
        promote this style.
      </para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.9.0. Orca currently provides a
          &styleguidelink; and a <literal>default.py</literal> script

      </section>

    </section>

    <section id="urscripting"><title>Customizable Behavior Per Application 
      ("Scripting")</title>
      <para>It is expected that the default behavior will provide
        reasonable access to all applications that use the AT-SPI.
        However, to provide dramatically improved access, Orca must be
        able to provide customized behavior for individual
        applications.</para>
      <para>For example, one can envision a script for an e-mail
        application that can provide prioritized access to one's
        inbox.  Another example may be that the script provides
        keyboard access to select and copy displayed text to the
        system clipboard in the event the application doesn't support
        this (e.g., the only way to select text in a terminal window
        is to use a mouse - a script might create new keybindings to
        allow a user to do this from the keyboard).</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.2.4.  Orca provides a framework for both
          per-application and per-toolkit customized scripts.  This
          framework is documented in the &scriptguidelink;.</para>

      </section>

    </section>

    <section id="urscripters"><title>Support for Script Writers</title>

      <para>Orca will provide tools and utilities to help the script
        writer.  These utilities not only include a library of useful
        methods to use from scripts, but also runtime tools to help
        the script writer analyze the system in action.</para>

      <section><title>Functional Description and Status</title>

        <itemizedlist>
          <listitem>
            <para>&complete; V0.2.2. Debug utilities to output AT-SPI
              and input device events. Managed via several debug level
              settings in the <literal>debug.py</literal>
              module.</para>
          </listitem>
          <listitem>
            <para>&complete; V0.2.2. Debug utilities to record and playback keystrokes.
              Managed via the separate
              <literal>src/tools/record_keystrokes.py</literal> and
              <literal>play_keystrokes.py</literal> modules.
              Keystroke recording can also be enabled by pressing the
              "Insert+Pause" keys while running Orca itself.</para>
          </listitem>
          <listitem>
            <para>&complete; V0.2.2. Debug utilities to record what is being sent to
              speech and braille. This is managed via the debug level
              settings.</para>
          </listitem>
          <listitem>

            <para>&complete; V0.2.7.  Keystroke to speak/braille
              application with focus: Insert+F6.</para>

          </listitem>
          <listitem>

            <para>&complete; V0.2.7. Keystroke to speak/braille
              the current script (and script class) in use: Insert+F6</para>

          </listitem>
          <listitem>
            <para>&complete; V0.2.7.  Keystroke to dump
              all applications: Insert+F5.</para>
          </listitem>
          <listitem>
            <para>&complete; V0.2.7.  Keystroke to dump the ancestors
              of the object with focus: Insert+F7.</para>
          </listitem>
          <listitem>
            <para>&complete; V0.2.7.  Keystroke to dump the
              widget hierarchy of the application with
              focus: Insert+F8.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="urofficeapps"><title>Usable Access to Key Office
      Productivity Applications</title>

      <para>As needed, Orca will provide custom scripts for key office
        productivity applications: e-mail, simple text editing,
        calendaring, contact management, instant messaging,
        etc.</para>

      <section><title>Functional Description and Status</title>

        <para>Orca is targeting the following office productivity
          applications:</para>

        <table><title>Office Productivity Applications</title>
          <tgroup cols='4'>
            <thead>
              <row>
                <entry>Application Class</entry>
                <entry>Target Application and Version</entry>
                <entry>Status</entry>
                <entry>Test Plan</entry>
              </row>
            </thead>
          
            <tbody>
              <row>
                <entry>Desktop</entry>
                <entry>gnome-panel and metacity - GNOME 2.16</entry>
                <entry>&incomplete; meta city working well, gnome-panel
                working OK, but the keyboard navigation model needs
                work. &shoulddeliver; V1.0.</entry>
                <entry>&desktoptestlink;</entry>
              </row>
              <row>
                <entry>File System Navigation</entry>
                <entry>Nautilus - GNOME 2.16</entry>
                <entry>No Script Needed</entry>
                <entry>&nautilustestlink;</entry>
              </row>
              <row>
                <entry>Simple Text Editing</entry>
                <entry>GEdit - GNOME 2.16</entry>
                <entry>&complete; V0.2.2</entry>
                <entry>&gedittestlink;</entry>
              </row>
              <row>
                <entry>E-mail</entry>
                <entry>Evolution - GNOME 2.16</entry>
                <entry>&complete; V0.2.2</entry>
                <entry>&emailtestlink;</entry>
              </row>
              <row>
                <entry>Calendar</entry>
                <entry>Evolution - GNOME 2.16</entry>
                <entry>&incomplete; [OWNER: RNB] month view not
                  done. &shoulddeliver; V2.22+.</entry>
                <entry>&ecaltestlink;</entry>
              </row>
              <row>
                <entry>Contact Management</entry>
                <entry>Evolution - GNOME 2.16</entry>
                <entry>&complete; V0.2.2</entry>
                <entry>&econtacttestlink;</entry>
              </row>
              <row>
                <entry>Instant Messaging</entry>
                <entry>GAIM - GNOME 2.16</entry>
                <entry>&complete; V0.2.2</entry>
                <entry>&gaimtestlink;</entry>
              </row>
              <row>
                <entry>Help</entry>
                <entry>Yelp - GNOME 2.16</entry>
                <entry>&complete; V0.9.0 via mozilla script.</entry>
                <entry>&yelptestlink;</entry>
              </row>
              <row>
                <entry>Document Generation</entry>
                <entry>StarOffice 8 PP3, OpenOffice 2.0.3 (initial); StarOffice 8 PP4, OpenOffice 2.0.4 (better)</entry>
                <entry>&complete; V0.9.0.</entry>
                <entry>&sowritertestlink;</entry>
              </row>
              <row>
                <entry>Spreadsheet</entry>
                <entry>StarOffice 8 PP3, OpenOffice 2.0.3 (initial); StarOffice 8 PP4, OpenOffice 2.0.4 (better)</entry>
                <entry>&complete; V0.9.0.</entry>
                <entry>&socalctestlink;</entry>
              </row>
              <row>
                <entry>Presentation</entry>
                <entry>StarOffice 8 PP3, OpenOffice 2.0.3 (initial); StarOffice 8 PP4, OpenOffice 2.0.4 (better)</entry>
                <entry>&incomplete; [OWNER: RNB] &shoulddeliver; V2.22.</entry>
                <entry>&soimpresstestlink;</entry>
              </row>
              <row>
                <entry>Web Browsing</entry>
                <entry>                         Firefox 2.0 (minimal); Firefox 3.0 (better)</entry>

                <entry>&incomplete; [OWNER: LMS] Firefox 2.0 is
                  probably as good as it is going to get. Working with
                  IBM and Firefox team to provide better information
                  via AT-SPI for FF3.  - &mustdeliver; V1.1.</entry>

                <entry>&ff2testlink;</entry>
              </row>
              <row>
                <entry>Content Viewing</entry>
                <entry>Adobe Reader</entry>
                <entry>&incomplete; [OWNER: MMP] 
                   needs work from Adobe. &shoulddeliver;
                  V2.22</entry>
                <entry>&acroreadtestlink;</entry>
              </row>
              <row>
                <entry>Java platform</entry>
                <entry>Swing toolkit</entry>
                <entry>&complete; V0.9.0.</entry>
                <entry>&javatestlink;</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      
      <section><title>Firefox details</title>
        <para>FF3 should at least provide the following
        functionality.  For character and word navigation, Firefox
        should honor the standard well known keystrokes such as Left and
        Right arrows or Ctrl+Left and Ctrl+Right arrows for moving by
        character and word.  When the user reaches the beginning or
        end of a line they should wrap to the next or previous line.  
        If the user reaches the beginning or end of a frame they should wrap
        to the next or previous frame.</para>

        <para>When up and down arrowing orca should as closely as
        possible move by line in the web page.  If the line contains
        links, orca should speak the word "link" after the link.  If
        possible, the link should also be underlined with dots 7 and 8
        on the braille display.</para>

        <para>If the line contains form controls, the label for the
        control should be read followed by the role.  If the role is
        a text entry area and the user has placed the cursor at the location
        where text can be entered, the user should also hear
        "editable".  The braille user will see the cursor followed by
        "edit".</para>

        <para>When tabbing and shift tabbing between elements the user
        should hear the element followed by the role.  If a user
        encounters a combo he/she should be able to press "space" to
        expand the control in order to make a selection.  When space
        is pressed again to make the selection the control will close
        allowing the user to continue moving through the page.</para>

        <para>If tab or shift+tab is pressed while a control is opened, it
        will be closed and focus will move to the next element.</para>

        <para>Check boxes and buttons will simply be toggled by space
        as they are in any other application.</para>

        <para> The letters "h" and "Shift+h" will
        be used to move between headings.  When the heading is
        reached, orca will speak and braille the header followed by
        "heading and the heading level.  The numbers 1 through 6 will
        also be available to allow the user to move to the next
        heading at that level.</para>

        <para>The letters "t" and "Shift+t" will be used to move
        between tables.  When the table is reached its title will be
        spoken as well as the value of the cell with focus.
        Shift+Alt+{Left,Right,Up,Down} will be used to move from cell
        to cell.  Shift+Alt+{Home,End} will be used to move between the
        beginning and the end of the current table.  When changing
        column or row, the appropriate headings should also be
        read.</para>

        <para>The keys "orca+tab" and "shift+orca+tab"  will be used to move
        between form fields.</para>

        <para>The letters "l" and "Shift+l" will allow the user to
        move from list to list.</para>

        <para>The letters "u" and "v" will be used to
        move between unvisited and visited links.</para>

        <para>The letters "o" and "Shift+o" will be used to move
        between large objects.  Large objects can be things such as:
        headings, paragraphs, and tables containing text of a certain
        length.  For this feature, links and form controls will not be 
        considered large objects.</para>
      </section>

      <section><title>Verbalized Links spec</title>
        <para>When moving between lines in an office document and the
        line contains one or more links orca should speak the word
        link after the link.  If the "link" voice is specified, the
        link should be read using the link voice.  This functionality
        should also be available in "say all" mode.  In braille the
        link should always be underlined using dots 7 and 8.  If the
        user moves by character or word, the word "link" will not be
        repeatedly spoken.  If the user double presses insert+f to get
        detailed information on a character they will be informed that
        the character is part of a link.</para>
      </section>   

    </section>

    <section id="urcustomizable"><title>Configurable Presentation and Interaction</title>
      <para>Different users have different capabilities (e.g., some
        may be able to hear some synthesis voices better than others;
        some may use braille while others do not) and desires (e.g.,
        some may prefer faster speaking rates).  As such, the general
        manner and means by which Orca presents information to the
        user must be configurable by the end user.</para>
      <para>Users must also be able to change configuration settings
        while Orca is running, including the ability to turn
        presentation modes (i.e., speech, braille, magnification) on
        or off without the need to restart Orca.</para>
      <section><title>Functional Description and Status</title>
        <para>&complete; V0.9.0. Orca provides both text-based and GUI-based
          configuration mechanisms.</para>
      </section>

    </section>

    <section id="urfocustrack"><title>Focus Tracking as the Default Mode</title>
      <para>Known as "focus tracking," Orca must provide a mode
        to track the current region of interest, which is usually the
        object that has keyboard focus.</para>
      <para>When first starting up and when the region of interest has
        changed, Orca must provide a short summary of the region of
        interest, and must also provide a mechanism for the user to
        obtain more detailed information.  The presentation will
        follow the &styleguidelink;.</para>
      <para>When navigating text areas in a character-by-character or
        word-by-word fashion (or any linear fashion for that matter),
        Orca must provide an option to play an audio cue when the
        caret crosses line boundaries.  This will be looked at in a future release.</para>

      <section><title>Functional Description and Status</title>

        <para>&incomplete; does not provide audio cues when crossing linear
          boundaries. &shoulddeliver; V2.22+.</para>

      </section>

    </section>

    <section id="urflatreview"><title>Flat Review Mode</title>
      <para>Orca must provide the ability for a user to review the
        contents of the desktop or a given application.  This is
        typically done by the user making a &wkc; indicating "review,"
        with Orca reacting by presenting the area to be reviewed.  At
        any time, the user can interrupt the review mode, causing
        presentations such as speech output to stop
        immediately.</para>
      <para>Another option for review mode includes the ability to
        use a set of &wkc;s to quickly skim the contents of the
        display.</para>
      <para>Play audio cues across line boundaries.</para>
      <para>In addition, when in flat review mode, Orca will
        optionally allow the mouse to follow the object of interest.  This feature will be toggled by a checkbox in the general tab of the orca config UI.</para>
      <para>If the user is moving the mouse with flat review they will also be able to move by small increments.  If the user holds down shift while pressing flat review up, down, character previous or next they will move the mouse 5 pixels in that direction.  
      If the move the mouse feature is not enabled pressing these keys will do nothing.            
      </para>
      <para> If the process of moving the mouse should cause a tooltip to appear, orca should speak it.</para>
      <para>The review of the desktop will follow the &styleguidelink;,
        and will at least provide a short summary of the available
        applications.  While the review of an application will also
        follow the &styleguidelink;, the overall presentation depends
        largely upon the application being reviewed.</para>

      <para>&todo; MOVE TO SCRIPT WRITING UTILITIES and do post V1.0.
        Add notions of "hierarchical review," and "hybrid review
        (e.g., in/out of lists)".  Need to flesh out the primary
        purposes of each.</para>

      <section><title>Functional Description and Status</title>

        <para>&flatreviewtestlink;</para>

        <para>&complete; V0.2.2.  General flat review is working well.</para>

        <para>&incomplete; [OWNER: WDW] no automatic reading of dialogs
          from current position or from top left. &shoulddeliver;
          V1.1.</para>

        <para>&incomplete; no audio cues when navigating across line
          boundaries. &shoulddeliver; V1.1.</para>

      </section>

    </section>

    <section id="urtextattributes"><title>Presentation of Text Attributes</title>
      <para>For any given piece of text, Orca must provide the ability
        to speak the following text features:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Attributes</emphasis> - font size,
            face (bold, italic, etc.), underline, color, etc.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Capitalization</emphasis> - is it
            capital or lower case?</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Selection</emphasis> - is the text
            selected or not?</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Justification</emphasis> - left,
            fill, center, right</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Indentation</emphasis> - what is the
            indentation level?</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Bounds</emphasis> - what is the
            bounding box of the text (where and size)?</para>
        </listitem>
      </itemizedlist>

      <section><title>Functional Description and Status</title>

        <para>&textattributestestlink;</para>

        <para>&incomplete; text attributes ('indent',
        'underline', 'strikethrough', 'justification', 'style',
        'size', and 'family-name') are spoken when the user presses
        Insert+f, but they are not presented on the braille
        display.</para>

        <para>&incomplete; capital letters are spoken with a
        different voice, but 'verbalized' capitalization (e.g.,
        "capital m") has not been implemented.</para>

        <para>&incomplete; the user is notified when they
        select text, but they are not notified if they navigate to
        selected text.</para>

        <para>&incomplete; there is no option to present text bounds
        to the user.</para>
        <para>&incomplete; there is no option to present text bounds
        to the user.</para>
        <para>&incomplete; When autocomplete appears when a user is typing he or she is not alerted to the fact that this information has appeared.  As soon as the information pops up the first option should be spoken/brailled.  If the user continues typing and the first choice changes this should also be spoken.  It is not expected that the user would hear all possibility's just the first.  If the user can arrow up or down through choices orca should track this as in any other list or combo.  It is okay if this information overrides the typing echo.</para>
<para>&complete; The user should be able to dynamically set a row or column as a header in openoffice calc.  The hot keys for defining this will be insert+r for row and insert+c for column.  In order to set a row or column the user should first set focus to the row or column that they wish to define and then press the appropriate hot key.  Once the user has defined a row or column it will be used to first speak this header when moving between rows or columns.  This will behave similar to the way orca reads headers in the evolution mail list when moving focus from column to column.  For example, if row c is defined as headers the appropriate cell will first be read before reading the cell with focus when the column is changed.  If a row or column is already set, double pressing the row or column definition on that row or column will unset it as a dynamic header.</para>        
      </section>

    </section>
    
    <section id="urlearnmode"><title>Learn Mode (Command Echo)</title>
      <para>Orca must provide a feature that optionally presents the
        command to be invoked when the user presses a key on the
        keyboard or braille display.  All key events in this mode will
        be consumed by Orca, thus allowing the user to freely type
        anything to learn what the effect of the key will be. A
        command being spoken must be able to be interrupted at any
        time.</para>

      <section><title>Functional Description and Status</title>

        <para>&learnmodetestlink;</para>

        <para>&complete; V0.2.2.  Insert+F1 brings up learn mode and
        Escape exits it.</para>

      </section>

    </section>

    <section id="urgestures"><title>Customizable Gestures</title>

      <para>While Orca will provide a default set of well known
        &keyboardgestureslink; and &braillegestureslink;, users must
        be able to override these gestures and extend them with
        gestures of their own choosing.</para>

      <para>The user interface for defining these gestures must be
        easy to use.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; 
          &mustdeliver; V1.1.</para>

      </section>

    </section>

    <section id="urwhereami"><title>"Where Am I?" Command</title>
      <para>Orca will provide a means for a user to determine information
        about the current object of interest, including the object
        itself, which window it is in, which application, which
        workspace, etc.</para>
      <para>The object of interest can vary depending upon the mode
        the user is using at the time.  For example, in focus tracking
        mode, the object of interest is the object with keyboard
        focus.  In review mode, the object of interest is the object
        currently being visited, whether it has keyboard focus or
        not.</para>
      <section><title>Functional Description and Status</title>
        <para>&whereamitestlink;</para>

        <para>&incomplete; V2.19.5. Gecko script provides advanced where am I 
        information for links in the form of link previews.  These include 
        protocol, target file name, relative location and possibly file 
        size information.  Double-clicking the "Where am I" key in Firefox  
        provides a page summary, which includes the total number of headings, 
        forms, tables, visited links, and unvisited links in the document. 
        </para>
    
        <para>&complete; V2.17.3. Orca provides both brief and detailed WhereAmI information with the single and double presses of the "WhereAmI" key.  </para>

        <para>There will be four commands related to "Where am I":</para>

        <orderedlist numeration="arabic">
          <listitem>
            <para>Basic information:  Single Press of KP_Enter</para>
          </listitem>
          <listitem>
            <para>Detailed information: Double Press of KP_Enter</para>
          </listitem>
          <listitem>
            <para>Title bar: Single Press of Insert+KP_Enter</para>
          </listitem>
          <listitem>
            <para>Status bar: Double Press of Insert+KP_Enter</para>
          </listitem>
        </orderedlist>

        <section><title>Basic Information: Single Press of KP_Enter</title>

          <para>When KP_Enter is pressed a single time, Orca will
          speak and display basic information in a specific order
          about the item with focus.  In particular:</para>

          <para>Checkboxes present the following information (an
          example is "Enable speech, checkbox checked, Alt E"):</para>
          
          <orderedlist numeration="arabic">
            <listitem>
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>state</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Radio Buttons present the following information (an
          example is "Punctuation Level, Some, Radio button, selected,
          item 2 of 4, Alt M"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>group name</para>
            </listitem>
            <listitem>
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>state</para>
            </listitem>
            <listitem>
              <para>relative position</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Comboboxes present the following information (an
          example is ""Speech system: combo box, GNOME Speech
          Services, item 1 of 1, Alt S"):</para>

          <orderedlist numeration="arabic">
            <listitem>    
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>current value</para>
            </listitem>
            <listitem>
              <para>relative position</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Spin Buttons present the following information (an
          example is "Scale factor: spin button, 4.00, Alt F"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>current value</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Push Buttons present the following information (an
          example is "Apply button, Alt A"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Sliders present the following information (examples
          include "Pitch slider, 5.0, 56%"; "Volume slider, 9.0, 100%"):

          <orderedlist numeration="arabic">
            <listitem>
              <para>label</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>value</para>
            </listitem>
            <listitem>
              <para>percentage (if possible)</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Menu items present the following information (examples
          include "File menu, Open..., Control + O, item 2 of 20, O",
          "File menu, Wizards Menu, item 4 of 20, W"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>Name of the menu containing the item, followed by
              its role</para> 
            </listitem>
            <listitem>
              <para>item name, followed by its role (if a menu)
              followed by its accelerator key, if any</para>
            </listitem>
            <listitem>
              <para>relative position</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Tabs in a Tab List present the following information
          (an example is "Tab list, braille page, item 2 of 5"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>label + "page"</para>
            </listitem>
            <listitem>
              <para>relative position</para>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Text boxes present the following information (an example
          is "Source display: text, blank, Alt O"):</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>label, if any</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>contents</para>
              <orderedlist numeration="arabic">
                <listitem>
                  <para>if no text on the current line is selected, 
                  the current line</para>
                </listitem>
                <listitem>
                  <para>if text is selected on the current line, 
                  that text, followed by "selected"</para>
                </listitem>
                <listitem>
                  <para>if the current line is blank/empty, "blank"</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>mnemonic (i.e. Alt plus the underlined letter), 
              if any</para>
            </listitem>
          </orderedlist>

          <para>Tree Tables present the following information (an example
          is "Tree table, Mike Pedersen, item 8 of 10, tree level 2"):

          <orderedlist numeration="arabic">
            <listitem>
              <para>label, if any</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>current row (regardless of speak cell/row setting)</para>
            </listitem>
            <listitem>
              <para>relative position relative to the parent </para>
            </listitem>
            <listitem>
              <para>if expandable/collapsible: expanded/collapsed</para>
            </listitem>
            <listitem>
              <para>if applicable, the level</para>
            </listitem>
<listitem>
<para>all other selected rows (regardless of speak cell/row setting) followed by "selected</para>
</listitem>
          </orderedlist>
          <para>Tree Tables present the following information (an example
          is "Tree table, Mike Pedersen, item 8 of 10, tree level 2"):

          <orderedlist numeration="arabic">
            <listitem>
              <para>label, if any</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
            <listitem>
              <para>current row (regardless of speak cell/row setting)</para>
            </listitem>
            <listitem>
              <para>relative position relative to the parent </para>
            </listitem>
            <listitem>
              <para>if expandable/collapsible: expanded/collapsed</para>
            </listitem>
            <listitem>
              <para>if applicable, the level</para>
            </listitem>
<listitem>
<para>all other selected rows (regardless of speak cell/row setting) followed by "selected</para>
</listitem>
          </orderedlist>
          <para>Icon Panels present the following information (an example
          is "Icon Panel, Mike Pedersen, item 8 of 10, "):

          <orderedlist numeration="arabic">
            <listitem>
              <para>label, if any</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>

            <listitem>
              <para>label, if any</para>
            </listitem>
            <listitem>
              <para>role</para>
            </listitem>
<listitem>
<para>all selected icons followed by "selected</para>
</listitem>
          </orderedlist>

          <para>Given the nature of OpenOffice Calc, Orca should
          override the default KP_Enter behavior when the item with
          focus is a cell within Calc.  In this instance, the
          following information should be spoken/displayed:</para>

          <orderedlist numeration="arabic">
            <listitem>
              <para>"Cell"</para>
            </listitem>
            <listitem>
              <para>the cell coordinates</para>
            </listitem>
            <listitem>
              <para>the cell contents:</para>
              <orderedlist>
                <listitem>
                  <para>if the cell is empty, "blank"</para>
                </listitem>
                <listitem>
                  <para>if the cell is being edited AND if some text
                  within the cell is selected, the selected text
                  followed by "selected"</para>
                </listitem>
                <listitem>
                  <para>otherwise, the full contents of the cell</para>
                </listitem>
              </orderedlist>
            </listitem>
          </orderedlist>

        </section>

        <section><title>Detailed Information: Double Press of KP_Enter</title>

          <para>When KP_Enter is pressed twice quickly, Orca will
          speak and display the information it currently does when
          performing the "Where am I" command, with the following
          application specific changes:</para>

          <orderedlist>
            <listitem>
              <para>If focus is within a text box and text within that
              text box is selected, Orca should NOT read the current
              line.  Rather, it should state the text that is selected spanning paragraph boundaries if necessary
              followed by stating "selected".  Orca should also speak any attributes present in this line of text.  IE if a word is bold bold should be spoken before the word.</para>
            </listitem>
          </orderedlist>

        </section>

        <section><title>Title bar: Single Press of Insert + KP_Enter</title>

          <para>When Insert + KP_Enter is pressed a single time, Orca
          will speak and display the following information:</para>

          <orderedlist>
            <listitem>
              <para>The contents of the title bar of the application
              main window</para>
            </listitem>
            <listitem>
              <para>If in a dialog box within an application, the
              contents of the title bar of the dialog box.</para>
            </listitem>
            <listitem>
              <para>Orca will pause briefly between these two pieces
              of information so that the speech user can distinguish
              each.</para>
            </listitem>
          </orderedlist>

          <para>Calc-Specific Handling: If Insert+KP_Enter is pressed
          a single time while focus is on a cell within OpenOffice
          Calc, Orca will speak the following information:</para>

          <orderedlist>
            <listitem>
              <para>The contents of the title bar of the application
              main window</para>
            </listitem>
            <listitem>
              <para>The title of the current worksheet</para>
            </listitem>
          </orderedlist>

          <para>Note that if the application with focus is Calc, but a
          cell does not have focus, the default behavior should be
          used.</para>

        </section>

        <section><title>Status bar: Double Press of Insert + KP_Enter</title>

          <para>When Insert+KP_Enter is pressed twice quickly, Orca
          will speak and display the contents of the status bar. In
          applications where the status bar contents are
          distinguishable elements (e.g. OpenOffice Writer), Orca
          should pause briefly between elements.  In applications
          where the elements of the status bar are labeled
          (e.g. OpenOffice Writer), Orca should also speak and display
          the label of a given element followed by that element.
          (e.g. "Page Style: Default", "Zoom: 100%")</para>
          <para>If the user is in a dialog box the default button should be spoken when this key is pressed. </para>

        </section>
      </section>
    </section>


    <section id="urfind"><title>"Find" Command</title>
      <para>Orca will allow users to enter a string to search for a
        visible text string in the current window or entire desktop.  The keystroke to invoke this dialog will be: (KP_Delete).
        If the string is found (e.g., the string matches the
        accessible name of an object or the string matches a string in
        a text area), Orca will switch to "review mode" and make the
        associated object the object of interest.  From this point,
        the user can use a &wkc;  to go back to the object with focus,
        give the found object focus if possible, or perform the
        equivalent of a mouse click on the found object.  This feature should also support (shift+KP_Delete) to search back word. </para>
      <para>In the event the user is a magnification user, the magnifier
        will moved to the found object.</para>
      <para>The search will be performed in the text flow of the
        locale (e.g., left-to-right, top-to-bottom) from the current
        point of interest or optionally from the top of the window, wrapping back to the beginning of the
        window if necessary.</para> 
      <para>The search will provide options for requiring a full word
        match (e.g., "ok" will not match "token") or substring match
        (e.g., "ok" will match "token").</para> 
      <para>Finally, the "find" command will also allow the user to
        search for text based on attribute (e.g., "bold"), and the
        search will allow the user to search based solely on attribute
        type, text string, or a combination of both.</para>
<para> The dialog will appear as follows; The first control will be the edit field to type the string to be found. The second will be a group of radio buttons to specify if the search is to be performed from the top or from the current position.  The third control will be a check box to determine if the search is case sensitive or not.  This will be followed by "find" and "cancel".   
      <para>&note; this feature is for searching for visible text
        only.  Traditional searching for text in documents will be
        supported by application functionality (e.g., the "search"
        menu item in the application.</para>

      <section><title>Functional Description and Status</title>

        <para>&incomplete; [OWNER: WDW] &shoulddeliver; V1.0.  The only part of this that is not yet complete is the "attribute search" portion.</para>

      </section>

    </section>

    <section id="urwatched"><title>Watched Objects</title>

      <para>Orca will allow users to indicate interest in an object.
        Once interest has been given, Orca will notify the user of
        changes to that object, whether it or its window has focus or
        not.  A watched object should not be restricted to the screen.  For example, a user may want to set a particular cell in a spreadsheet as a watched object.  The user may not care if this cell is visible or not.  The user will press insert+w to move to the watched object and press numpad dash to return to the focus position keeping with the method of exiting flat review.  The user will  press CTRLinsert+w to actually set a watched object and doublepress CTRL+Insert+w to unset it. </para>

      <para>In the event the user is a magnification user, the magnifier
        will moved to the found object.  Alternatively, the user may 
        have set up a separate "zoomer" to watch the object.  In this
        case, the zoomer will always reflect the current state of the
        watched object.</para>

      <section><title>Functional Description and Status</title>

        <para>&incomplete; &shoulddeliver; V2.2.22+.</para>

      </section>

    </section>

    <section id="urbookmark"><title>Bookmarked Objects</title>
      <para>Orca will allow users to define a gesture (keyboard or
        braille) that will tell Orca to enter flat review mode and make a
        particular object the object of interest.  From this point,
        the user can use a &wkc; to go back to the object with focus,
        give the bookmarked object focus if possible, or perform the
        equivalent of a mouse click on the bookmarked object.  Flat review only applies to non-web applications.  In firefox focus will simply move to the bookmarked position on the web page.  If possible it would be really nice to play the system beep if the bookmark can't be found.</para>
      <para>In the event the user is a magnification user, the magnifier
        will moved to the bookmarked object.</para>
      <para>&note; if the specified bookmarked object is not in the
        window with focus, with the exception of web pages it is not a requirement to jump to the
        bookmarked object.</para>
        <para> When in firefox the user should be able to define bookmarks for each individual page.  It is understood that if the page is dynamic the feature might not always work.</para>
        <para> If possible, many users have expressed a desire to be able to save the bookmarks that they generate.</para>
        <para> The following keystrokes should be used to perform the functions related to this feature.</para>

          <para>Alt-orca-1 through 6
    Add a bookmark in this numbered slot. If a bookmark already exists at this register it will be replaced with the new one. </para>
 
          <para>orca-1 through 6
    Move the pointer to the bookmark in this numbered slot. </para>
 
          <para>Alt-Shift-1 through 6
    Report "Where am I" information for this bookmark relative to the current pointer location.</para> 
 
          <para>"b" and "shift+b" Move between the given bookmarks for the given application or page. </para>         
          <para> "Alt+orca+b" should be used to save the defined bookmarks for the current application or page.</para>

      <section><title>Functional Description and Status</title>
          
          <para>&complete; V2.19.3.  Functionality was implemented for all features 
          shown above.  Magnification was not considered for the initial version.</para>

        <para>&complete; &shoulddeliver; V2.20.</para>

      </section>

    </section>

    <section id="urdocread"><title>Document Reading</title>
      <para>When the user navigates the document using document
        navigation techniques, caret movement should always be spoken
        with the appropriate context (e.g. character, word, line)
        depending upon why the caret moved.</para>
        <para>Optionally orca should allow the user to hear a sound as they cross line boundaries.  This will be controlled by a check box on the general settings tab called "play sound  on line wrap".  This option will be unchecked by default.</para>
      <para>Orca must provide the ability for a user to read the
        contents of a document, such as e-mail or a word processing
        document.  As the document is read, Orca will instruct the
        associated application to scroll so as to keep the portion
        being read visible on the screen (and magnifier).  The
        invocation of the document reading will be triggered via a
        &wkc; and may be stopped at any time by the user.  When the
        review stops, the caret will be positioned at the end of the
        last word spoken (if possible - this depends upon the
        capabilities of the text area as well as the speech
        engine).</para>
        <para>If the user attempts to use the sayall feature from within a dialog box the dialog will be read from top to bottom regardless of the current focus position.  In a dialog orca should not attempt to move the focus durring a sayall.</para>
      <para>Orca will also provide options to highlight the text
        being spoken.</para>
      <para>&note; while the reading of a document will follow the
        &styleguidelink;, the overall presentation depends largely upon
        the document being read (e.g., is it a text document,
        spreadsheet, web page, etc.?).</para>

      <section><title>Functional Description and Status</title>
        <para>&sayalltestlink;</para>
        <para>&complete; V0.9.0. Reading works well, including setting
          the caret position when speech is interrupted.</para>
        <para>&incomplete; text is not highlighted, nor is there an
          option to do so. &deliver; V2.22+.</para>
        <para>&incomplete; audio cues not played when auto
          reading across line boundaries.  &shoulddeliver; V2.22.</para>
      </section>
    </section>

    <section id="urnonfocus"><title>Ability of Non-focused Windows to Present
      Information</title>
      <para>Orca must allow for the presentation of information of
        objects that do not have keyboard focus.  While the
        presentation will typically be information on objects that the
        user has requested interest in, it may also come from custom
        scripts that have decided it is important for them to present
        something.  Examples of such information include announcing
        the status of a progress bar, announcing the subject/sender of
        incoming e-mail, etc.</para>

      <section><title>Functional Description and Status</title>

        <para>&complete; V0.2.2.</para>

      </section>

    </section>

    <section id="urspeech"><title>Speech Synthesis</title>
      <para>One of the primary non-visual ways to present a graphical
        display to a user is via speech synthesis.  Note that Orca
        need not be a speech synthesizer, but it must be able to drive
        one.  The most important functionality Orca needs for speech
        synthesis are as follows:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">General Synthesis</emphasis> -
            Orca must be able to speak an utterance (e.g., a word, a
            label, a sentence, etc.) or set of utterances (e.g., a
            paragraph or entire document).  The utterance being spoken
            must be able to interrupted at any time.</para>
          <para>&detail; if at all possible, the synthesis engine
            should be able to tell Orca what has been spoken, allowing
            Orca to synchronize its internal data structures with what
            has been presented to the user via speech.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Voice Styles</emphasis> - Orca
            must be able to identify and allow the user to select
            between the voices available on the various synthesis
            engines available on the system.  In addition, Orca must
            allow the user to customize parameter settings for the
            voices, such as average pitch, speaking rate, and volume.
            The combination of {voice, pitch, rate, volume} will be
            known as a "voice style."  Orca will provide the user with
            the ability to select the voice styles to be used for
            various speaking operations (e.g., default, uppercase,
            warning, alarm, etc.), and may also provide unique "voice
            style sets" depending upon the navigation mode being used
            (e.g., focus tracking, review mode, etc.).  At a minimum,
            Orca will support a "default" style to be used for the
            majority (if not all) of the speaking operations.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Verbalized Caps</emphasis> -
            When speaking a word beginning with a capital letter, Orca
            should offer the option of saying "cap" or "all caps"
            prior to speaking the word in addition to offering an
            optional uppercase voice. For example, one might hear "cap
            Willie" or "all caps WILLIE".</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Verbalized Links</emphasis> -
            When speaking a link, Orca should offer the option of
            saying "link" after to speaking the link in addition to
            offering an optional hyperlink voice.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Speaking Rate
            Modification</emphasis> - While the speaking rate will
            generally remained fixed once configured, users may
            sometimes which to speed up or slow down the presentation
            of speech.  While it is ideal that user can do this while
            the synthesis engine is speaking, such functionality is
            typically not provided by the majority of speech synthesis
            engines.  Orca must, however, allow the user to change the
            speaking rate that will be used for the next utterance,
            should the underlying engine support changes to speaking
            rate.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Multilingual Text</emphasis> -
            Orca should provide the ability to speak a single
            utterance that contains words or phrases from multiple
            locales.  This is an emerging area for speech synthesis
            engines, however, so Orca will support this feature if the
            underlying engine(s) support it.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Spelling Mode</emphasis> - Orca
            must be able to optionally spell out words, either letter
            by letter or by military (e.g., alpha, bravo, charlie)
            spelling.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Verbalized
            Punctuation</emphasis> - Orca must be able to optionally
            verbalize punctuation.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Repeated Character
            Count</emphasis> - Orca must be able to optionally
            compress the repetition of character by saying something
            such as "25 dash characters" instead of "dash dash dash dash
            dash..."</para>
        </listitem>

      </itemizedlist>

      <section><title>Functional Description and Status</title>

        <para>&verbalizedpunctestlink;</para>
        <para>&verbalizedlinktestlink;</para>
        <para>&verbalizedcapstestlink;</para>
        <para>&spellingmodetestlink;</para>

        <para>&complete; V0.2.2.  General synthesis.</para>
        <para>&complete; V0.2.2.  Voice styles done via ACSS.</para>
        <para>&incomplete; Verbalized caps. &mustdeliver; V2.22+.</para>
        <para>&incomplete; [OWNER: RNB] Verbalized
        hyperlinks. &mustdeliver; V1.1.</para>
        <para>&complete; V0.2.2.  Speaking rate modification.
          Insert+{left,right}_arrow.</para>
        <para>&incomplete; Multilingual text. &deliver; V2.22+.</para>        <para>&incomplete; V0.2.7. Letter-by-letter spelling mode of
        current flat review item performed when user quickly presses
        KP_5 (word review) or KP_8 (line review) twice in a
        row.  Military spelling will be performed when these keys are pressed quickly 3 times in a row.  Military spelling is a &mustdeliver; V1.1.</para>
        <para>&complete; V0.2.6. Verbalized punctuation is a settable
        option.</para>
        <para>&incomplete; [OWNER: MMP - further define requirements and functionality]
          [OWNER: WDW - implementation] 
          Repeated character count. &shoulddeliver; V1.1.</para>
      </section>

    </section>

    <section id="urecho"><title>Key and Word Echo</title>

      <para>Orca must provide a set of options to allow the user to
        enable the automatic speaking of keys as they are typed,
        alphanumeric characters as they are entered/deleted, and words
        as they are entered.  The speech must be interruptable at any
        time.</para>

      <section><title>Functional Description and Status</title>

        <para>There are two main options for selecting key and
          word echo: key and word.  These are not mutually
          exclusive.</para>

        <para>Regardless of any setting, if the user deletes a
          character using the Backspace or Delete keys, the next or
          previous visible character will be spoken, depending upon
          which key was used.  If action key echo is enabled (see
          below), the key causing the deletion should be spoken before
          the visible character is spoken.</para>

        <para>Key echo applies to the entire keyboard and is for
          echoing keys as they are pressed.  The keys are broken into
          the following groups that the user can optionally enable for
          echoing:</para>

        <itemizedlist>
          <listitem>
            <para>Alphanumeric and punctuation keys: typing keys that
              print something on the display, with the exception of
              space.</para>
          </listitem>
          <listitem>
            <para>Modifier keys: CTRL, ALT, Shift, Insert, and "Fn" on laptops.</para>
          </listitem>
          <listitem>
            <para>Locking keys: Caps Lock, Num Lock, Scroll Lock, etc.</para>
          </listitem>
          <listitem>
            <para>Function keys: The keys at the top of the keyboard.</para>
          </listitem>
          <listitem>
            <para>Action keys: space, enter, escape, tab, backspace,
              delete, arrow keys, page up, page down, etc.</para>
          </listitem>
        </itemizedlist>

        <para>When a key from any enabled group is pressed, the key
          will be spoken.  In the case where a combination of keys is
          pressed, the entire combination should be spoken if the
          group any one of the combined keys has been enabled. For
          example, if you press Shift+f10 and modifiers are to be
          spoken but function keys are not the user should hear "shift
          f ten".</para>

        <para>The echoing of alphanumeric and punctuation keys for
          editable text areas is specialized in that it works with the
          visible text being edited (e.g., one does not hear the
          physical keys being typed when a user is entering a password
          - instead one hears the characters being added or removed
          from the text area).  When typing in editable text areas,
          the alphanumeric and punctuation key echo behaves as
          follows: If key echo is enabled, inserted characters caused
          by typing alphanumeric and punctuation keys will be spoken
          when they are inserted.  &detail; this refers to the total
          visual change in the text area as the result of a single
          user action, which may or may not have a simple and direct
          mapping to the AT-SPI text events.</para>

        <para>Word echo applies to editable text areas only, and
          behaves the following way: If word echo is enabled, words
          will be spoken when the user enters a visible change that
          depicts a word boundary (e.g., punctuation, new line,
          whitespace).  Both the word and the boundary character will
          be sent to speech output, and a separate speech output
          setting (e.g., verbalized punctuation) will be used to
          determine whether to speak the boundary character or
          not.</para>

        <para>Furthermore, if either word or alphanumeric key echo are
          enabled, Orca will provide the following behavior:</para>

        <itemizedlist>
          <listitem>
            <para>If word or alphanumeric key echo are enabled, any
              single character surrounded by whitespace (including
              punctuation) will be spoken.  For example, if the user
              has typed "this .", "period" will be spoken when the
              user inserts a whitespace character.</para>
          </listitem>
          <listitem>
            <para>If word or alphanumeric key echo are enabled, any
              group of punctuation characters typed in a row will be
              spoken one at a time when the user inserts a whitespace
              character.</para>
          </listitem>
          <listitem>
            <para>OPTIONAL: if the user presses the "escape" key in a
              text area and the text area reverts the text back to
              what it was, the user should hear this.</para>
          </listitem>
        </itemizedlist>

        <para>&keywordechotestlink;</para>

        <para>&complete; V0.2.4.</para>

      </section>

    </section>

    <section id="urbraille"><title>Refreshable Braille</title>
      <para>Braille is another primary non-visual presentation mode
        for screen readers.  As with speech synthesis, Orca need not
        directly support a braille display, but it must be able to
        drive one.  The primary end requirements for a braille display
        are as follows:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Work with BrlTTY</emphasis> - it
            is not expected that users will abandon character cell
            access to their virtual consoles.  To preserve this access
            (which will be done via BrlTTY), Orca will not interrupt
            or alter the behavior of BrlTTY.</para>
       </listitem>
        <listitem>
          <para><emphasis role="bold">Effective use of
            space</emphasis> - Orca should try to use the cells on the
            braille display as effectively as possible.  This will be
            driven primarily by the &styleguidelink;, and can also
            include the the option to effectively compress white
            space.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Effective use of input
            buttons</emphasis> - Orca should use any input buttons on
            the display as effectively as possible, with the default
            behavior being the equivalent effect of the BrlTTY
            bindings for those buttons.  These functions include
            panning the braille display as well as driving the flat
            review mode.  The functions also include the ability to
            quickly toggle features on and off, such as: toggle
            compression of whitespace, toggle attributes to be shown
            using dots 7-8 or status cells, toggle between grade I and
            grade II, etc.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Effective use of cursor routing
            keys</emphasis> - Orca should enable the cursor routing
            keys to be used to click on objects, set slider values,
            etc.</para>
          <para>In the event there is a second set of cursor routing
            keys, Orca will attempt to make effective use of them
            (e.g., pressing them tells Orca to relay text attribute
            information via speech).</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Effective use of input button
            and cursor routing key combinations</emphasis> - Orca
            should allow the user to use combinations of input buttons
            and/or cursor routing keys to perform operations such as
            selecting text, jumping to bookmarks, etc.</para>
          <para>&note; selection of text using combined keyboard and
            braille actions (e.g., holding the shift key while
            pressing a cursor routing key) may also be
            considered.</para>
          <para>&note; input of text using chording of braille keys
            might be considered, but is not a high priority.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Cursor options</emphasis> - Orca
            should provide the user with the ability to show the cursor
            or not.  If shown, the user should have the ability to make
            it blink, and should also have the ability to tell it to
            either take the entire cell or just dots 7-8.  It would be best if orca would just inherit the settings chosen in brltty.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Ability to have multiple pan regions
            on the display</emphasis> - watched objects may need to be able
            to remain on a static area of the display (e.g., the rightmost
            10 cells).  The braille support should enable this and should
            also allow the user to pan either the "main" display or the
            watched area.</para>
        </listitem>
        <listitem>
        <para><emphasis role="bold">Ability to switch between logical and screen layout presentations.</emphasis></para> 
        </listitem>              
      </itemizedlist>

      <section><title>Functional Description and Status</title>

        <para>&brailletestlink;</para>

        <para>&complete; V0.2.2.  Work with BrlTTY.</para>

        <para>&incomplete; [OWNER: MMP - further define requirements and functionality]
          [OWNER: WDW - implementation] 
          Effective use of space.  Not addressed at all. &mustdeliver V1.1.</para>

        <para>&incomplete; Effective use of input buttons. Does OK for
          general panning and flat review control, but other
          functionality not supported. &shoulddeliver remainder V1.1.</para>

        <para>&incomplete; Effective use of cursor routing keys.
          Works well for activating components and moving the caret.
 &shoulddeliver;   V1.1+.</para>

        <para>&incomplete; Key combinations.  Not investigated, can be
          done via traditional keyboard techniques.  &shoulddeliver;
          V1.1.</para>

        <para>&incomplete; Cursor options. Rely upon BrlTTY.
          &deliver; BrlTTY.</para>
          <para>&incomplete; Ability to specify weather or not focus is moved when navigating with the braille display. &shoulddeliver; V2.22.</para>
          <para>Orca should provide a check box on the braille tab of the config UI called "braille display moves focus".  This feature will be unchecked by default. If this feature is enabled orca should not speak if focus was updated by pressing a Braille key.  If this feature is disabled the user should be able to wander the application with the braille display similar to flat review.</para>
          <para>In text areas using movement commands from the braille display should move the caret.  If the user moves to the last currently visible line of the window the page should scroll.  If the act of panning does not cause the user to move to a new line it is not necessary to update the cursor position.  If the user moves the braille display up and down by line orca should try to honor the horizontal position.  </para>
          <para>If the user moves up and down in a tree, list, combo, or the desktop  focus should be updated.</para>
          <para>If the user is in a spreadsheet or table, focus should be updated to the cell showing on the Braille display.</para>

        <para>&incomplete; Ability to switch between logical and window layout . &shoulddeliver; V2.22.</para>
        <para>Orca should provide two primary modes of braille presentation.  The first will be called logical mode which is a braille mode consisting of the item with focus as well as relevant contextual information.  
        The second will be called window layout mode.  This mode will accurately convey the actual layout of the screen.  Wherever possible the information presented while navigating the screen with the braille display should match what is displayed while focus tracking.</para>
        <para>These modes can be switched by the use of a radiobutton group in the braille section of the Orca configuration UI.  The group will be called "braille layout" and the buttons will be: "window layout" and "logical layout"</para>
        <para>See the current implementation of braille support for examples on logical mode.</para>
        <para>window layout mode should where ever possible attempt to accurately present each line of the display.  Except for a few cases documented below orca will not append contextual or extra role information to the braille display.  The following examples will show how various pieces of information should be presented on the braille display by orca in this mode.  The following apply to GTK, Java, OpenOffice, and web applications.</para>
        <para>Even though the window title information is not always visible on the screen and can not be focused the title should be presented at the top of the window.</para>
        <para>Text should be presented honoring the actual layout as much as possible.  If space is present it should be accurately displayed on the braille display.  It is OK to continue using the tab character to show the location of tabs. Presentation of attributes will be handled in a separate RFE.  If text is selected or attributes are requested in the braille preferences of the orca configuration UI they should also be shown according to the users preference.</para>
        <para>Frame and panel labels should be presented in relation to what they are labeling.  For example the label for a panel should be above the controls in the panel.</para>
        <para>Menubars should simply present the text of the menubar across the braille display.  If a user presses a cursor routing key over one of the items that item should be activated.</para>
        <para>Menus should simply present the text of each menu  item on the braille display as it is encountered.  If a user presses a cursor routing key over one of the items that item should be activated.</para>
        <para>Combobox labels and entries should be presented wherever they appear.  Depending on user feedback we may have to suffix this with the role but lets not do this unless many users ask for it. </para>
        <para>Checkboxes should be indicated by the braille  checkbox marker  for checked and "< >" for not checked.  This marker should be followed by the label.</para>
        <para>radiobutton group  labels should be presented in relation to what they are labeling.  For example the label for a button group should be above the actual radio buttons.</para>        
        <para>radiobuttons should be indicated by the radiobutton braille marker for selected and for not selected.  This marker should be followed by the label if one exists.></para>
        <para>Sliders and Scrollbars should be presented as the value followed by the rolename.  This is an exception to our normal screen mode presentation because if we present just the value the user may have trouble inferring the context.  Vertical scrollbars should be presented at the bottom of the window on which ever side of the window they appear.</para>
        <para>Icon groups such as the desktop should appear as they are presented on the screen.  For example, if three icons appear next to each other on the desktop orca should attempt to place them on the braille display.  Orca should make sure that at least the icon with focus is on the braille display.</para>
        <para>&incomplete; Multiple pan regions. &shoulddeliver; V1.1.</para>        

      </section>

    </section>

    <section id="urmag"><title>Synchronization with Screen Magnifiers</title>
      <para>In addition to co-existing with each other, a screen
        magnifier and Orca must be in sync with each other.  For
        example, when Orca is reviewing an area of the screen that is
        larger than the screen magnifier can display at once, Orca
        must inform the screen magnifier that the region of interest
        has changed.</para>

      <section><title>Functional Description and Status</title>

        <para>&incomplete; [OWNER: COMMUNITY] minimal magnification
        support is in Orca as of V0.9.0.  Need to work with the
        community to further define what a compelling magnifier
        experience means.  &shoulddeliver V1.0 or &mustdeliver; V1.1,
        depending upon community contributions.</para>

      </section>

    </section>

    <section id="urperf"><title>Acceptable Response Time</title>

      <para>Orca must not degrade the perceptible performance of the
        system.  That is, user should be able to detect any decrease
        is responsiveness of the desktop when the Orca is being used.
        In addition, a user's interaction with Orca should appear as
        crisp and as lively as normal interaction with the display via
        traditional interfaces (e.g., the keyboard).</para>

      <para>Acceptable performance of the speech synthesis output is
        very important.  Orca must be able to provide speech synthesis
        that meets or exceeds the following performance
        metrics:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Time to First Sound</emphasis> -
            The time between when a speech synthesizer gets a request
            to speak and when the synthesizer actually starts speaking
            must be minimal (e.g., less than 30ms).</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Time to Cancel</emphasis> - Orca
            must be able to cancel speech synthesis in progress, and
            the time to cancel must be minimal (e.g., less than 30ms).
            Furthermore, the time between when a cancel is issued and
            the time the next utterance is to be spoken must be
            minimal (e.g., less than 30ms).</para>
        </listitem>
      </itemizedlist>
      <para>All updates to the braille display should occur within
        50ms of the time the update command was issued.</para>
      <para>The magnifier should offer smooth performance and show no
        visible lag.</para>

      <section><title>Functional Description and Status</title>

        <note><title>Performance Scope</title> 
          <para>It is understandable that much of the response time may
            be due to factors outside the control of Orca (e.g., Bonobo
            and the underlying speech engine).  As such, the primary
            responsibility of Orca and each application script is to
            process AT-SPI and keyboard events as quickly as possible.
          </para>
        </note>

      </section>

    </section>

    <section id="urdocs"><title>Documentation and Tutorials</title>
      <para> Although it is a reasonable goal that Orca should attempt
        to achieve, users cannot be expected to be able set up and use
        Orca without documentation.  Like other systems, such as JAWS,
        Orca must provide documentation and tutorials on the
        installation, configuration and use of Orca.  This
        documentation must come in form(s) that are accessible to
        people who need to use the screen reader (e.g., accessible
        text and audio).</para>

      <section><title>Functional Description and Status</title>

        <para>&incomplete; [OWNER: WDW and COMMUNITY] documents will
          continually be updated, as will the Orca web site and
          WIKI.</para>

      </section>

    </section>

  </chapter>
