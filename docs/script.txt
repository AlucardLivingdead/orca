Scripts in Orca

Description of a script
==========
Scripts are collections of
behaviors and data which are associated with a running application.
Each running application has its own script object.  Script objects,
like any Python object, can contain an arbitrary amount of data.
Script objects also contain references to event handling functions,
and a set of key bindings.  Key binding sets are hash tables which map
key names to python function names.

The event handling functions used by scripts are contained in Python
modules, but scripts themselves are not, strictly speaking, Python
modules.  This is because functions in a single script may actually be
located in several different modules.  This will become clearer in the
following section on script loading and activation, but this is the
case since both references to functions in an app-specific Python
module as well as the default module can be present in the same script
object.

Script loading, unloading, and activation
==========
The orca.py
Python module watches for children-changed events on the desktop
object, which indicate application startup and shutdown.  When an
application is added to the desktop, Orca creates a script object for
it, and loads the script.  Loading a script comprises the following:

* Load the default event handlers from default.py and add them to the
  script object
* Load the default key bindings from default-keybindings.py and add
  them to the script object
* Attempt to find app-specific event handlers in a module with the
  same name as the application - so for example, for an application
  named test3, the app-specific event handlers would be contained in a
  Python script called test3.py - if such a module is found, load and
  install the event handlers from it into the script object
* Attempt to load and install app-specific key bindings from a file
  with a name of the form appname-keybindings.py - so for our test3
  application, the key bindings Python script would be called
  test3-keybindings.py

When an application is removed from the desktop, the script object is
unloaded and destroyed.

Orca.py also contains an event handler for toplevel window activation
events.  When a window activation occurs, Orca determines which app to
which the toplevel window belongs, deactivates the currently active
script, and activates the newly active applications' script.
Activating a script involves:
* Iterate through all the event handlers contained in the script, and
  register them with the Orca core
* Activate the script's set of key bindings by making it the active
  set in the keyboard hooks module

Unloading scripts involves:

* Iterate through all event listeners in the script object, and
  unregisrter them with the Orca core
* Deactivate the script's key binding set

App-specific event handling
==========
If the default event handlers are not adequate, or special behavior is
needed for specific applications, custom event handlers can be written
in app-specific Python modules.  App-specific event handler Python
modules are named with the same name as the application.  The only
argument passed to event handling functions is a core.Event object
which contains the following members:
      * type - string containing the type of event
      * source - the object which generated the event
      * detail1 - event-specific data
      * detail2 - event specific data
      * any_data - event specific data

The event handler that Orca knows about, and which can be added to
app-specific modules are:

	* onWindowActivated - toplevel window was activated
	* onWindowDestroyed - toplevel window destroyed
	* onFocus - object received focus
	* onStateChanged - an object's state changed
	* onSelectionChanged - the selection changed within an object
	* onCaretMoved - the text caret moved
	* onTextInserted - text was inserted into an object
	* onTextDeleted - text was deleted from an object
	* onLinkSelected - a hyperlink object was selected
	* onNameChanged - an object's name changed

If any of these functions exist in an app-specific Python module,
references to them will override references to functions with the same
name in default.py whe the app-specific script object is created.  If
you wish to re-use the default scripts for a particular event handler,
you can simply import the default module in your app-specific module,
and call the default event handler directly.  For example:

import default
...
def onFocus (event):
    # Check to see if we should do something app-specific
    # If not, do the default behavior
    default.onFocus (event)

Useful script utility functions
==========
The a11y module of Orca provides several useful functions for script
writers.  These functions include:

	* getObjects - retrieve a list of all the objects contained
	  within the specified object (this function ignores the
	  children of objects which have the "manages descendants" state
	  set
	* findByRole - returns a list of all the objects within the
	  specified object of the specified role - the root object is
	  the first argument, and the role name string is the second
	  argument
	* findByName - returns a list of all the objects within the
	  specified object of the specified name - the root object is
	  the first argument, and the name string is the second
	  argument
	* getLabel - returns the label for the specified object

a11y also includes convenience methods for retrieving the various
interfaces of objects.  these functions include getAccessible,
getTable, getText, etc.



Producing speech from a script
=========
To produce speech from a script, simply import the speech module.
There is no need to initialize it, since Orca does this on startup.
The say and stop functions are used to speak text and stop speech.
The voice to use for speaking, or the voice to stop, is specified as
the first argument to these calls, and is the name of the desired
voice.  Orca guaranties a voice named default, but application
specific scripts may wish to support other user-definable voices such
as hyperlink, email, etc.

Producing Baille from scripts
==========
The brl module allows a script to produce Braille.  It supports
displaying text in multiple virtual software-based regions, as well as
Braille key callbacks.  It is documented in braille.txt.  Note that
for responsiveness reasons, scripts which produce both Braille and
speech should produce Braille first.

Key bindings
==========
Key binding sets are hash tables listing the
string names of keys, and the string names of Python functions to be
called when those keys are pressed.  Python modules containing Orca
key binding sets must contain a dictionary (hash table) called
keybindings, which contains the keybindings.  For example:

keybindings = {}
...

As an example, to have Orca call a function called orcaHelp when the
user holds down the insert key while pressing f1, the keybinding
definition would be the following:

keybindings["insert+F1"] = "orcaHelp"

The key binding set in a script object contains all default key
bindings, plus any app-specific ones.  If there are duplicates,
app-specific key bindings always override the default ones.  when a
script is loaded, the scripts keybinding set is created.  Orca
searches for the functions named by the key binding Python modules
first in the app-specific event handling module, and if it finds no
match, in the default.py module.  So in the script object itself, the
key binding set is stored as a hash table mapping key names to the
actual function references.  this differs from the key binding
modules, where the values of the hash table are strings containing
function names, rather than the function references.  Scripts use
function references to avoid the extra lookup.

