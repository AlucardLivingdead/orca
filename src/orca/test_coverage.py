# Orca
#
# Copyright 2004-2007 Sun Microsystems Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

"""The test coverage module for the Orca screen reader."""

__id__        = "$Id: orca.py 2050 2007-02-25 22:40:48Z wwalker $"
__version__   = "$Revision: 2050 $"
__date__      = "$Date: 2007-02-25 14:40:48 -0800 (Sun, 25 Feb 2007) $"
__copyright__ = "Copyright (c) 2005-2007 Sun Microsystems Inc."
__license__   = "LGPL"


# TODO (LMS) importing should be done from reading the orca directories
import acss
import atspi
import braillegenerator
import braille
import brlmon
import chnames
import debug
import dectalk
import default
import espeechfactory
import eventsynthesizer
import find
import flat_review
import focus_tracking_presenter
import Gecko
import gnomespeechfactory
import hierarchical_presenter
import httpserver
import __init__
import input_event
import keybindings
import keynames
import mag
import orca_console_prefs
import orca_glade
import orca_gui_find
import orca_gui_main
import orca_gui_prefs
import orca_i18n
import orca_prefs
import orca
import orca_quit
import orca_state
import outloud
import phonnames
import platform
import presentation_manager
import pronunciation_dict
import punctuation_settings
import rolenames
import script
import settings
import speechgenerator
import speech
import speechserver
import util
import where_am_I

import coverage

def main():
    """
    Start code coverage gathering before starting orca.
    """

    # TODO (LMS) The module list should be generated by
    # reading the orca directories.
    #
    module_list = [ acss, atspi, braillegenerator, braille, brlmon, chnames, debug, dectalk, default, espeechfactory, eventsynthesizer, find, flat_review, focus_tracking_presenter, Gecko, gnomespeechfactory, hierarchical_presenter, httpserver, __init__, input_event, keybindings, keynames, mag, orca_console_prefs, orca_glade, orca_gui_find, orca_gui_main, orca_gui_prefs, orca_i18n, orca_prefs, orca, orca_quit, orca_state, outloud, phonnames, platform, presentation_manager, pronunciation_dict, punctuation_settings, rolenames, script, settings, speechgenerator, speech, speechserver, util, where_am_I ]


    debug.println(debug.LEVEL_SEVERE,
                  "TEST_COVERAGE main START")

    coverage.erase()
    coverage.start()
    
    debug.println(debug.LEVEL_SEVERE,
                  "CALLING orca.main")

    # Code coverage gathering is enabled. Now start orca.
    # This step is normally done in orca.py.
    orca.main()
    
    # TODO (LMS) To get here, the user currently needs to
    # manually quit or send a signal to the python process.
    # This should probably be done in the runall.sh script.
    #
    debug.println(debug.LEVEL_SEVERE, "CALLING coverage.stop")
    coverage.stop
    
    debug.println(debug.LEVEL_SEVERE,
                  "CALLING coverage.analsis(orca default)")

    # Generate coverage reports for each of the orca modules.
    for i in range(0, len(module_list)-1):
        debug.println(debug.LEVEL_SEVERE,
                      "analyzing %s" % (module_list[i]))
    
        coverage.analysis(module_list[i])
        coverage.report(module_list[i])
    
    
    debug.println(debug.LEVEL_SEVERE,
                  "TEST_COVERAGE main END")


if __name__ == "__main__":
    debug.println(debug.LEVEL_SEVERE,
                  "TEST_COVERAGE EXITING")
    sys.exit(main())


