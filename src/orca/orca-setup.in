#!@PYTHON@

# Orca
#
# Copyright 2004-2005 Sun Microsystems Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

"""Permits the user to set up preferences for orca using speech prompts
and a command line interface.
"""

import os, sys, time
from orca.orca_i18n import _  # for gettext support

# Create the user's .orca directory
#
orcadir = os.path.join (os.environ["HOME"], ".orca")
try:
    os.chdir (orcadir)
except:
    print _("Creating .orca directory.")
    try:
        os.mkdir (orcadir)
    except:
        # [[[TODO: WDW - need to print a message and fail here.]]]
        #
        pass
        
# Create a new settings file
#
settingsFileName = os.path.join (orcadir, "user-settings.py")
settings = open (settingsFileName, "w")
settings.writelines ("# user-settings.py - custom Orca settings\n")
settings.writelines ("# Initially generated by orca-setup\n")
settings.writelines ("\n")
settings.writelines ("import orca.debug as debug\n")
settings.writelines ("import re\n")
settings.writelines ("\n")
settings.writelines ("#debug.setDebugLevel(debug.LEVEL_FINER)\n")
settings.writelines ("#debug.setEventDebugFilter(None)\n")
settings.writelines ("#debug.setEventDebugFilter(re.compile('[\S]*focus|[\S]*activ'))\n")
settings.writelines ("#debug.setEventDebugFilter(re.compile('nomatch'))\n")
settings.writelines ("#debug.setEventDebugFilter(re.compile('[\S]*:accessible-name'))\n")
settings.writelines ("#debug.setEventDebugLevel(debug.LEVEL_OFF)\n")

settings.writelines ("\n")

# Speech setup
#
import orca.speech as speech
setupSpeaker = None


def sayAndPrint (text, stop=False, getInput=False):
    """Prints the given text.  In addition, if the setupSpeaker field
    is not None, speaks the given text, optionally interrupting
    anything currently being spoken.
    
    Arguments:
    - text: the text to print and speak
    - stop: if True, interrupt any speech currently being spoken
    - getInput: if True, elicits raw input from the user and returns it

    Returns raw input from the user if getInput is True.
    """
    
    if setupSpeaker is not None:
        if stop:
            setupSpeaker.stop ()
        setupSpeaker.say (text)

    if getInput:
        return raw_input(text)
    else:
        print text
        

def makeSpeaker (d, name):
    """Prompts the user to set up a voice for a given style for a given
    speech driver.

    Arguments:
    - d: the speech driver (e.g., Festival)
    - name: the style (e.g., default)

    Returns: a tuple: (speaker, voice name) or None
    """
    voices = d.getAllVoices ()
    sayAndPrint (_("Select %s voice: ") %(name), True)
    i = 1
    voiceCount = len (voices)
    while i <= voiceCount:
        sayAndPrint (_("%d. %s") %(i, voices[i-1].name))
        i = i + 1
    voice = int (sayAndPrint (_("Enter choice: "), False, True))
    if voice == 0 or voice > voiceCount:
        return None
    v = voices[voice-1]
    
    s = d.createSpeaker (v)
    s = s._narrow (speech.GNOME.Speech.Speaker)
    return (s, v.name)


def saveSpeaker (voicelist, d, s, voicename, name):
    """Saves the driver, speaker, and voice parameters (rate, pitch, volume)
    in the voicelist dictionary using the style name as a key.

    Arguments:
    - voicelist: the voicelist dictionary to update
    - d: the speech synthesis driver
    - s: the speaker
    - voicename: the name of the voice as described by the driver
    - name: the name of the style (e.g., "default")
    """
    
    pitch = s.getParameterValue ("pitch")
    rate = s.getParameterValue ("rate")
    volume = s.getParameterValue ("volume")
    params = [d.synthesizerName, voicename, rate, pitch, volume]
    voicelist[name] = params


def setupSpeech ():
    """Sets up speech support.  If speech setup is successful and the
    user wants it, writes speech settings to the setting file and returns
    True.  If speech is not available, or the user doesn't want speech,
    returns False.
    """
    
    global setupSpeaker
    
    if (not speech.init()) or (len(speech.drivers)) == 0:
        print _("No working GNOME Speech drivers found.")
        return False
    
    driverCount = len (speech.drivers)
    i = 1
    while i <= driverCount:
       
        # Speak the driver name also

        if i == 1:
            voices = speech.drivers[i-1].getAllVoices ()
            setupSpeaker = speech.drivers[i-1].createSpeaker (voices[0])
            setupSpeaker = setupSpeaker._narrow (speech.GNOME.Speech.Speaker)
            sayAndPrint (_("Welcome to Orca setup."))
            sayAndPrint (_("Select default speech synthesizer"))
            del voices
        sayAndPrint (_("%d. %s") %(i, speech.drivers[i-1].synthesizerName))
        i = i + 1
    synth = int (sayAndPrint (_("Enter choice: "), False, True))
    if synth == 0 or synth > driverCount:
        sayAndPrint (_("Speech will not be used.\n"), True)
        return False
    d = speech.drivers[synth-1]

    voices = {}

    # Prompt for the default voice
    #
    (s, voicename) = makeSpeaker (d, "default")
    saveSpeaker (voices, d, s, voicename, "default")

    # Make the uppercase voice the same as default for now, but with a
    # little higher pitch.
    #
    pitch = s.getParameterValue ("pitch")
    pitch = pitch * 1.5
    s.setParameterValue ("pitch", pitch)
    saveSpeaker (voices, d, s, voicename, "uppercase")

    # Prompt for additional voices - these are user-defined voice styles
    # that will be saved away for now.
    #
    anotherVoice = True
    while anotherVoice:
        anotherVoice = sayAndPrint (_("Create another voice?  Enter y or n: "),
                                    False,
                                    True)
        if anotherVoice[0:1] == 'Y' or anotherVoice[0:1] == 'y':
            anotherVoice = True
        else:
            anotherVoice = False
        if anotherVoice:
            name = sayAndPrint (_("Enter voice name: "), False, True)
            (s, voicename) = makeSpeaker (d, name)
            saveSpeaker (voices, d, s, voicename, name)

    settings.writelines ("voices = " + str(voices)+"\n")
    keyEcho = sayAndPrint (_("Use key echo?  Enter y or n: "), True, True)
    if keyEcho[0:1] == 'Y' or keyEcho[0:1] == 'y':
        settings.writelines ("keyEcho = True\n")
    else:
        settings.writelines ("keyEcho = False\n")

    settings.writelines ("useSpeech = True\n")
    return True


def setupBraille ():
    """Sets up Braille support.  If Braille is available and the user
    wants it, returns True.  If Braille is unavailable or the user
    doesn't want it, returns False.
    """
    
    global setupSpeaker

    working = False
    try:
        import orca.braille as braille
        working = braille.init ()
	braille.shutdown ()
    except:
        pass

    if working:
        useBraille = sayAndPrint (
            _("Braille support appears to work, use it?  Enter y or n. "),
            False,
            True)

        if useBraille[0:1] == 'Y' or useBraille[0:1] == 'y':
            return True
        else:
            return False
    else:
        return False

def enableAccessibility():
    """Enables the GNOME accessibility flag.  Users need to log out and
    then back in for this to take effect."""

    os.system("gconftool-2 --type bool --set " \
	      + "/desktop/gnome/interface/accessibility true")

    sayAndPrint("Accessibility support for GNOME has been enabled.")
    sayAndPrint("You need to log out and log back in for the change "\
                +"to take effect.")

useSpeech = setupSpeech ()
if useSpeech == False:
    settings.writelines ("useSpeech = False\n")
    settings.writelines ("keyEcho = False\n")
    
useBraille = setupBraille ()
if useBraille:
    settings.writelines ("useBraille = True\n")
else:
    settings.writelines ("useBraille = False\n")

enableAccessibility()

sayAndPrint ("Orca setup finished.\n", True)
