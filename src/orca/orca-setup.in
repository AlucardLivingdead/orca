#!@PYTHON@

# Orca
#
# Copyright 2004 Sun Microsystems Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import os, sys, time

# Orca i18n

from orca_i18n import _

# Create the user's .orca directory

orcadir = os.path.join (os.environ["HOME"], ".orca")
try:
    os.chdir (gorcadir)
except:
    print _("Creating .orca directory.")
    try:
        os.mkdir (orcadir)
    except:
        pass
# Create a new settings file

settingsFileName = os.path.join (orcadir, "settings.py")
settings = open (settingsFileName, "w")

settings.writelines ("# Settings.py - Orca settings\n")
settings.writelines ("# Initially generated by orca-setup\n\n")

# Speech setup

import speech
setupSpeaker = None

def sayAndPrint (text, stop):
    print text
    if setupSpeaker is not None:
        if stop:
            setupSpeaker.stop ()
        setupSpeaker.say (text)

def makeSpeaker (d, name):
    voices = d.getAllVoices ()
    sayAndPrint (_("Select %s voice: ") %(name), 1)
    i = 1
    voiceCount = len (voices)
    while i <= voiceCount:
        sayAndPrint (_("%d. %s") %(i, voices[i-1].name), 0)
        i = i + 1
    if setupSpeaker is not None:
        setupSpeaker.say (_("Enter choice."))
    voice = raw_input (_("Enter choice: "))
    voice = int(voice)
    if voice == 0 or voice > voiceCount:
        return None
    v = voices[voice-1]
    
    s = d.createSpeaker (v)
    s = s._narrow (speech.GNOME.Speech.Speaker)
    return (s, v.name)

def saveSpeaker (voicelist, d, s, voicename, name):
    pitch = s.getParameterValue ("pitch")
    rate = s.getParameterValue ("rate")
    volume = s.getParameterValue ("volume")
    params = [d.synthesizerName, voicename, rate, pitch, volume]
    voicelist[name] = params


def setupSpeech ():
    global setupSpeaker
    
    if not speech.init () or len (speech.drivers) == 0:
        print _("No working GNOME Speech drivers found.")
        return False
    driverCount = len (speech.drivers)
    print _("Select default synthesizer:")
    i = 1
    while i <= driverCount:
       
        # Speak the driver name also

        if i == 1:
            voices = speech.drivers[i-1].getAllVoices ()
            setupSpeaker = speech.drivers[i-1].createSpeaker (voices[0])
            setupSpeaker = setupSpeaker._narrow (speech.GNOME.Speech.Speaker)
            setupSpeaker.say (_("Welcome to Orca setup."))
            setupSpeaker.say (_("Select default speech synthesizer"))
            del voices
        sayAndPrint (_("%d. %s") %(i, speech.drivers[i-1].synthesizerName), 0)
        i = i + 1
    synth = raw_input (_("Enter choice: "))
    synth = int (synth)
    if synth == 0 or synth > driverCount:
        sayAndPrint (_("Speech will not be used.\n"), 1)
        return False
    d = speech.drivers[synth-1]

    voices = {}

    # Prompt for the default voice

    (s, voicename) = makeSpeaker (d, "default")
    saveSpeaker (voices, d, s, voicename, "default")

    # Make the uppercase voice

    pitch = s.getParameterValue ("pitch")
    pitch = pitch * 1.5
    s.setParameterValue ("pitch", pitch)
    saveSpeaker (voices, d, s, voicename, "uppercase")

    # Prompt for additional voices

    anotherVoice = True
    while anotherVoice:
        prompt = _("Create another voice? enter y or n.")
        if setupSpeaker is not None:
            setupSpeaker.say (prompt)
        anotherVoice = raw_input (prompt)
        if anotherVoice == "Y" or anotherVoice == "y":
            anotherVoice = True
        else:
            anotherVoice = False
        if anotherVoice:
            prompt = _("Enter voice name: ")
            if setupSpeaker is not None:
                setupSpeaker.say (prompt)
            name = raw_input (prompt)
            (s, voicename) = makeSpeaker (d, name)
            saveSpeaker (voices, d, s, voicename, name)

    settings.writelines ("voices = " + str(voices)+"\n")
    text = _("Use key echo, enter y or n: ")
    if setupSpeaker is not None:
        setupSpeaker.stop ()
        setupSpeaker.say (text)
    keyEcho = raw_input (text)
    if keyEcho[0:1] == 'Y' or keyEcho[0:1] == 'y':
        settings.writelines ("keyEcho = True\n")
    else:
        settings.writelines ("keyEcho = False\n")
    return True

# Setup braille support

def setupBraille ():
    global setupSpeaker

    working = False
    try:
        import brl
        working = brl.init ()
    except:
        pass
    if working:
        text = _("Braille support appears to work, use it?  Enter y or n. ")
        if setupSpeaker is not None:
            setupSpeaker.stop ()
            setupSpeaker.say (text)
        useBraille = raw_input (text)
        if useBraille == "Y" or useBraille == "y":
            return True
        else:
            return False
    else:
        return False

useSpeech = setupSpeech ()
if useSpeech == True:
    settings.writelines ("useSpeech = True\n")
else:
    settings.writelines ("useSpeech = False\n")
    settings.writelines ("keyEcho = False\n")
useBraille = setupBraille ()
if useBraille:
    settings.writelines ("useBraille = True\n")
else:
    settings.writelines ("useBraille = False\n")
sayAndPrint ("Orca setup finished.\n", 1)
