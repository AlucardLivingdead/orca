AC_INIT(ChangeLog)

ORCA_MAJOR_VERSION=0
ORCA_MINOR_VERSION=2
ORCA_MICRO_VERSION=3
ORCA_VERSION="$ORCA_MAJOR_VERSION.$ORCA_MINOR_VERSION.$ORCA_MICRO_VERSION"
AM_INIT_AUTOMAKE(orca, $ORCA_VERSION)
AC_SUBST(ORCA_VERSION)

# libtool versioning
LT_CURRENT=0
LT_REVISION=0
LT_AGE=0
LT_VERSION_INFO='-version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}'
AC_SUBST(LT_VERSION_INFO)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Specify a header configuration file
AM_CONFIG_HEADER(config.h)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

dnl Gettext stuff

GETTEXT_PACKAGE=orca
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="cs de en_CA en_GB es fr gu it ne nl pa pt pt_BR rw sr sr@Latn sv uk vi zh_CN"
AM_GLIB_GNU_GETTEXT

dnl Checks for programs
AC_PROG_CC
AC_PROG_INSTALL
AC_ISC_POSIX

dnl Initialize libtool
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

# Check for various modules.  We want at least:
#
# python 2.4
# pyorbit 2.14.0
# pygtk 2.8.4
# gnome-python 2.6.2
# gtk+-2.0 2.8.16
# atk 1.11.3
# gail 1.8.11
# libgail-gnome 1.1.3
# eel 2.14.0
# at-spi 1.7.6
# gnome-speech 0.3.10
#
PKG_CHECK_MODULES(orca, \
	atk >= 1.11.3)

PKG_CHECK_MODULES(orca, \
	gail >= 1.8.11)

PKG_CHECK_MODULES(orca, \
	eel >= 2.14.0)

PKG_CHECK_MODULES(orca, \
	cspi >= 1.7.6)

PKG_CHECK_MODULES(orca, \
	gnome-speech >= 0.3.10)

PKG_CHECK_MODULES(orca, \
	gtk+-2.0 >= 2.8.16)

# Setup brl module build
#
PKG_CHECK_MODULES(brl, \
	glib-2.0 >= 2.10.0)

# Find the idl compiler

ORBIT_IDL=`pkg-config --variable=orbit_idl ORBit-2.0`
AC_SUBST(ORBIT_IDL)

# Find the at-spi IDL

AT_SPI_IDLDIR=`pkg-config --variable=idldir cspi-1.0`
AC_SUBST(AT_SPI_IDLDIR)

# Find the bonobo IDL

BONOBO_IDLDIR=`pkg-config --variable=idldir libbonobo-2.0`

# Find the bonobo-activation IDL

BONOBO_ACTIVATION_IDLDIR=`pkg-config --variable=idldir bonobo-activation-2.0`

AT_SPI_IDLFLAGS="-I$BONOBO_IDLDIR -I$BONOBO_ACTIVATION_IDLDIR -I$AT_SPI_IDLDIR"
AC_SUBST(AT_SPI_IDLFLAGS)

# Check for Python

AM_PATH_PYTHON(2.0)

# Find the headers needed to build extensions

AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(Could not find Python yeaders needed to build Python extensions)])

AC_SUBST(orca_LIBS)
AC_SUBST(orca_CFLAGS)


dnl   PYDOC_CHECK()
AC_DEFUN([PYDOC_CHECK],
[
  dnl enable/disable documentation building
  AC_ARG_ENABLE(pydoc,
    AC_HELP_STRING([--enable-pydoc],
                   [use pydoc to build documentation [default=no]]),,
    enable_pydoc=no)

  have_pydoc=no
  if test x$enable_pydoc = xyes; then
    AC_CHECK_FILE("$prefix/bin/pydoc", PYDOC="$prefix/bin/pydoc")
  fi

  if test -z "$PYDOC"; then
    enable_pydoc=no
  fi
  AM_CONDITIONAL(ENABLE_PYDOC, test x$enable_pydoc = xyes)
])

PYDOC_CHECK()

# orca-setup Glade file location

# Using datadir is more proper, but it seems to cause problems with
# $prefix not getting expanded.
#
#ORCA_SETUP_GLADE_DIR="${datadir}/orca/glade"
ORCA_SETUP_GLADE_DIR="$prefix/share/$PACKAGE/glade"
AC_SUBST(ORCA_SETUP_GLADE_DIR)

AC_OUTPUT([ 
Makefile
orca.spec
docs/Makefile
docs/pydoc/Makefile
po/Makefile.in
src/Makefile
src/brl/Makefile
src/orca/Makefile
src/orca/scripts/Makefile
src/orca/orca
src/orca/orca-setup
src/orca/orca_i18n.py
src/orca/platform.py
])
