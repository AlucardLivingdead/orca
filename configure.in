AC_INIT(ChangeLog)

ORCA_MAJOR_VERSION=0
ORCA_MINOR_VERSION=2
ORCA_MICRO_VERSION=8
ORCA_VERSION="$ORCA_MAJOR_VERSION.$ORCA_MINOR_VERSION.$ORCA_MICRO_VERSION"
AM_INIT_AUTOMAKE(orca, $ORCA_VERSION)
AC_CONFIG_MACRO_DIR([m4])
AC_SUBST(ORCA_VERSION)

# libtool versioning
LT_CURRENT=0
LT_REVISION=0
LT_AGE=0
LT_VERSION_INFO='-version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}'
AC_SUBST(LT_VERSION_INFO)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Specify a header configuration file
AM_CONFIG_HEADER(config.h)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

dnl Gettext stuff

GETTEXT_PACKAGE=orca
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

IT_PROG_INTLTOOL([0.35.0])

dnl Checks for programs
AC_PROG_CC
AC_PROG_INSTALL
AC_ISC_POSIX

dnl Initialize libtool
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

# Check for various modules.  We want at least the ones
# listed, plus:
#
# pyorbit 2.14.0
# pygtk 2.8.4
# gnome-python 2.6.2
# libgail-gnome 1.1.3
# gnome-mag-1.0 0.12.5 (optional)
#
#PKG_CHECK_MODULES(orca, \
#	glib-2.0 >= 2.10.0 \
#	gtk+-2.0 >= 2.8.16 \
#	libbonobo-2.0 >= 2.14.0 \
#	atk >= 1.11.3 \
#	gail >= 1.8.11 \
#	eel-2.0 >= 2.14.0 \
#	libspi-1.0 >= 1.7.6 \
#	cspi-1.0 >= 1.7.6 \
#	gnome-speech-1.0 >= 0.3.10 \
#)

# Setup brl module build
#
PKG_CHECK_MODULES(brl, \
	glib-2.0 >= 2.10.0)

# Find the idl compiler

ORBIT_IDL=`pkg-config --variable=orbit_idl ORBit-2.0`
AC_SUBST(ORBIT_IDL)

# Find the at-spi IDL

AT_SPI_IDLDIR=`pkg-config --variable=idldir libspi-1.0`
AC_SUBST(AT_SPI_IDLDIR)

# Find the bonobo IDL

BONOBO_IDLDIR=`pkg-config --variable=idldir libbonobo-2.0`

# Find the bonobo-activation IDL

BONOBO_ACTIVATION_IDLDIR=`pkg-config --variable=idldir bonobo-activation-2.0`

AT_SPI_IDLFLAGS="-I$BONOBO_IDLDIR -I$BONOBO_ACTIVATION_IDLDIR -I$AT_SPI_IDLDIR"
AC_SUBST(AT_SPI_IDLFLAGS)

# Check for Python

AM_PATH_PYTHON(2.4)

# Find the headers needed to build extensions

AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(Could not find python headers needed to build Python extensions)])

# Find the modules used by Orca

AM_CHECK_PYMOD(gettext,,,[AC_MSG_ERROR(Could not find python module gettext)])
AM_CHECK_PYMOD(getopt,,,[AC_MSG_ERROR(Could not find python module getopt)])
AM_CHECK_PYMOD(bonobo,,,[AC_MSG_ERROR(Could not find python module bonobo - make sure you have gnome-python with support for libbonobo-2.0 >= 2.14.0 installed)])
AM_CHECK_PYMOD(ORBit,,,[AC_MSG_ERROR(Could not find python module ORBit - make sure you have pyorbit >= 2.14.0 installed)])
AM_CHECK_PYMOD(ORBit,CORBA,,[AC_MSG_ERROR(Could not find python module ORBit.CORBA - make sure you have pyorbit >= 2.14.0 installed)])

# Don't require the DISPLAY to be set - the gtk checking will fail 
# if DISPLAY is set, and we don't like that.
#
#AM_CHECK_PYMOD(gtk,,,[AC_MSG_ERROR(Could not find python module gtk - make sure you have pygtk >= 2.8.14 installed)])
#AM_CHECK_PYMOD(gtk,gdk,,[AC_MSG_ERROR(Could not find python module gtk.gdk - make sure you have pygtk >= 2.8.14 installed)])
#AM_CHECK_PYMOD(gtk,glade,,[AC_MSG_ERROR(Could not find python module gtk.glade - make sure you have pygtk >= 2.8.14 installed)])

AM_CHECK_PYORBIT_MOD(Accessibility,,[AC_MSG_ERROR(Could not find python ORBit module Accessibility - make sure you have the atspi libspi-1.0 >= 1.7.6 installed)])
AM_CHECK_PYORBIT_MOD(GNOME_Speech,,[AC_MSG_WARN(Could not find python ORBit module Speech - you need gnome-speech-1.0 >= 0.3.10 installed to use speech)])
AM_CHECK_PYORBIT_MOD(GNOME_Magnifier,,[AC_MSG_WARN(Could not find python ORBit module GNOME_Magnifier - you need gnome-mag-1.0 >= 0.12.5 installed to use magnification)])
AC_CHECK_LIB(brlapi, brlapi_initializeConnection,, [brlapi_available="no"; AC_MSG_WARN(Could not find libbrlapi.so - you need BrlTTY >= 3.7.2 and BrlAPI >= 0.4.1 installed to use braille)])

AC_SUBST(orca_LIBS)
AC_SUBST(orca_CFLAGS)

PYDOC_CHECK()

AC_OUTPUT([ 
Makefile
orca.spec
docs/Makefile
docs/pydoc/Makefile
po/Makefile.in
src/Makefile
src/brl/Makefile
src/orca/Makefile
src/orca/scripts/Makefile
src/orca/orca
src/orca/orca_i18n.py
src/orca/platform.py
])

if test "x$brlapi_available" = "xno" ; then
echo
echo "NOTE: This script was unable to find libbrlapi.so, which is needed"
echo "for braille device support.  Orca will continue to work fine without"
echo "braille support.  If you want to use braille, however, you must"
echo "install and run BrlTTY >= 3.7.2 and BrlAPI >= 0.4.1."
echo
fi
